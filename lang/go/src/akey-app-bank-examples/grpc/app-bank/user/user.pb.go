// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/user.proto

package user

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AppUser struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AppId                string   `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	SessionId            string   `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	SecretPrivateKey     string   `protobuf:"bytes,4,opt,name=secret_private_key,json=secretPrivateKey,proto3" json:"secret_private_key,omitempty"`
	SecretPublicKey      string   `protobuf:"bytes,5,opt,name=secret_public_key,json=secretPublicKey,proto3" json:"secret_public_key,omitempty"`
	Nonce                string   `protobuf:"bytes,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
	AppUserId            string   `protobuf:"bytes,7,opt,name=app_user_id,json=appUserId,proto3" json:"app_user_id,omitempty"`
	CryptoType           string   `protobuf:"bytes,8,opt,name=crypto_type,json=cryptoType,proto3" json:"crypto_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppUser) Reset()         { *m = AppUser{} }
func (m *AppUser) String() string { return proto.CompactTextString(m) }
func (*AppUser) ProtoMessage()    {}
func (*AppUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_d570e3e37e5899c5, []int{0}
}

func (m *AppUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppUser.Unmarshal(m, b)
}
func (m *AppUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppUser.Marshal(b, m, deterministic)
}
func (m *AppUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppUser.Merge(m, src)
}
func (m *AppUser) XXX_Size() int {
	return xxx_messageInfo_AppUser.Size(m)
}
func (m *AppUser) XXX_DiscardUnknown() {
	xxx_messageInfo_AppUser.DiscardUnknown(m)
}

var xxx_messageInfo_AppUser proto.InternalMessageInfo

func (m *AppUser) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AppUser) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *AppUser) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *AppUser) GetSecretPrivateKey() string {
	if m != nil {
		return m.SecretPrivateKey
	}
	return ""
}

func (m *AppUser) GetSecretPublicKey() string {
	if m != nil {
		return m.SecretPublicKey
	}
	return ""
}

func (m *AppUser) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *AppUser) GetAppUserId() string {
	if m != nil {
		return m.AppUserId
	}
	return ""
}

func (m *AppUser) GetCryptoType() string {
	if m != nil {
		return m.CryptoType
	}
	return ""
}

type AppUserCurrency struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SysUserId            string   `protobuf:"bytes,2,opt,name=sys_user_id,json=sysUserId,proto3" json:"sys_user_id,omitempty"`
	BankId               string   `protobuf:"bytes,3,opt,name=bank_id,json=bankId,proto3" json:"bank_id,omitempty"`
	CoinType             string   `protobuf:"bytes,4,opt,name=coin_type,json=coinType,proto3" json:"coin_type,omitempty"`
	MainNet              string   `protobuf:"bytes,5,opt,name=main_net,json=mainNet,proto3" json:"main_net,omitempty"`
	Balance              string   `protobuf:"bytes,6,opt,name=balance,proto3" json:"balance,omitempty"`
	AddressBalance       string   `protobuf:"bytes,7,opt,name=address_balance,json=addressBalance,proto3" json:"address_balance,omitempty"`
	Address              string   `protobuf:"bytes,8,opt,name=address,proto3" json:"address,omitempty"`
	Decimals             uint32   `protobuf:"varint,9,opt,name=decimals,proto3" json:"decimals,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppUserCurrency) Reset()         { *m = AppUserCurrency{} }
func (m *AppUserCurrency) String() string { return proto.CompactTextString(m) }
func (*AppUserCurrency) ProtoMessage()    {}
func (*AppUserCurrency) Descriptor() ([]byte, []int) {
	return fileDescriptor_d570e3e37e5899c5, []int{1}
}

func (m *AppUserCurrency) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppUserCurrency.Unmarshal(m, b)
}
func (m *AppUserCurrency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppUserCurrency.Marshal(b, m, deterministic)
}
func (m *AppUserCurrency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppUserCurrency.Merge(m, src)
}
func (m *AppUserCurrency) XXX_Size() int {
	return xxx_messageInfo_AppUserCurrency.Size(m)
}
func (m *AppUserCurrency) XXX_DiscardUnknown() {
	xxx_messageInfo_AppUserCurrency.DiscardUnknown(m)
}

var xxx_messageInfo_AppUserCurrency proto.InternalMessageInfo

func (m *AppUserCurrency) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AppUserCurrency) GetSysUserId() string {
	if m != nil {
		return m.SysUserId
	}
	return ""
}

func (m *AppUserCurrency) GetBankId() string {
	if m != nil {
		return m.BankId
	}
	return ""
}

func (m *AppUserCurrency) GetCoinType() string {
	if m != nil {
		return m.CoinType
	}
	return ""
}

func (m *AppUserCurrency) GetMainNet() string {
	if m != nil {
		return m.MainNet
	}
	return ""
}

func (m *AppUserCurrency) GetBalance() string {
	if m != nil {
		return m.Balance
	}
	return ""
}

func (m *AppUserCurrency) GetAddressBalance() string {
	if m != nil {
		return m.AddressBalance
	}
	return ""
}

func (m *AppUserCurrency) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AppUserCurrency) GetDecimals() uint32 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

type AppUserTx struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AppId                string   `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	FromUserId           string   `protobuf:"bytes,3,opt,name=from_user_id,json=fromUserId,proto3" json:"from_user_id,omitempty"`
	ToUserId             string   `protobuf:"bytes,4,opt,name=to_user_id,json=toUserId,proto3" json:"to_user_id,omitempty"`
	FromUserCurrencyId   string   `protobuf:"bytes,5,opt,name=from_user_currency_id,json=fromUserCurrencyId,proto3" json:"from_user_currency_id,omitempty"`
	Amount               string   `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
	BankId               string   `protobuf:"bytes,7,opt,name=bank_id,json=bankId,proto3" json:"bank_id,omitempty"`
	Fee                  uint64   `protobuf:"varint,8,opt,name=fee,proto3" json:"fee,omitempty"`
	CoinType             string   `protobuf:"bytes,9,opt,name=coin_type,json=coinType,proto3" json:"coin_type,omitempty"`
	Address              string   `protobuf:"bytes,10,opt,name=address,proto3" json:"address,omitempty"`
	MainNet              string   `protobuf:"bytes,11,opt,name=main_net,json=mainNet,proto3" json:"main_net,omitempty"`
	TradeAt              uint64   `protobuf:"varint,12,opt,name=trade_at,json=tradeAt,proto3" json:"trade_at,omitempty"`
	SessionId            string   `protobuf:"bytes,13,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Decimals             uint32   `protobuf:"varint,14,opt,name=decimals,proto3" json:"decimals,omitempty"`
	TxStatus             uint32   `protobuf:"varint,15,opt,name=tx_status,json=txStatus,proto3" json:"tx_status,omitempty"`
	Code                 string   `protobuf:"bytes,16,opt,name=code,proto3" json:"code,omitempty"`
	CryptoType           string   `protobuf:"bytes,17,opt,name=crypto_type,json=cryptoType,proto3" json:"crypto_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppUserTx) Reset()         { *m = AppUserTx{} }
func (m *AppUserTx) String() string { return proto.CompactTextString(m) }
func (*AppUserTx) ProtoMessage()    {}
func (*AppUserTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_d570e3e37e5899c5, []int{2}
}

func (m *AppUserTx) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppUserTx.Unmarshal(m, b)
}
func (m *AppUserTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppUserTx.Marshal(b, m, deterministic)
}
func (m *AppUserTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppUserTx.Merge(m, src)
}
func (m *AppUserTx) XXX_Size() int {
	return xxx_messageInfo_AppUserTx.Size(m)
}
func (m *AppUserTx) XXX_DiscardUnknown() {
	xxx_messageInfo_AppUserTx.DiscardUnknown(m)
}

var xxx_messageInfo_AppUserTx proto.InternalMessageInfo

func (m *AppUserTx) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AppUserTx) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *AppUserTx) GetFromUserId() string {
	if m != nil {
		return m.FromUserId
	}
	return ""
}

func (m *AppUserTx) GetToUserId() string {
	if m != nil {
		return m.ToUserId
	}
	return ""
}

func (m *AppUserTx) GetFromUserCurrencyId() string {
	if m != nil {
		return m.FromUserCurrencyId
	}
	return ""
}

func (m *AppUserTx) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *AppUserTx) GetBankId() string {
	if m != nil {
		return m.BankId
	}
	return ""
}

func (m *AppUserTx) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *AppUserTx) GetCoinType() string {
	if m != nil {
		return m.CoinType
	}
	return ""
}

func (m *AppUserTx) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AppUserTx) GetMainNet() string {
	if m != nil {
		return m.MainNet
	}
	return ""
}

func (m *AppUserTx) GetTradeAt() uint64 {
	if m != nil {
		return m.TradeAt
	}
	return 0
}

func (m *AppUserTx) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *AppUserTx) GetDecimals() uint32 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *AppUserTx) GetTxStatus() uint32 {
	if m != nil {
		return m.TxStatus
	}
	return 0
}

func (m *AppUserTx) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *AppUserTx) GetCryptoType() string {
	if m != nil {
		return m.CryptoType
	}
	return ""
}

type AppUserBalance struct {
	AppUserId            string             `protobuf:"bytes,1,opt,name=app_user_id,json=appUserId,proto3" json:"app_user_id,omitempty"`
	AppId                string             `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	AppUserCurrencies    []*AppUserCurrency `protobuf:"bytes,3,rep,name=appUserCurrencies,proto3" json:"appUserCurrencies,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AppUserBalance) Reset()         { *m = AppUserBalance{} }
func (m *AppUserBalance) String() string { return proto.CompactTextString(m) }
func (*AppUserBalance) ProtoMessage()    {}
func (*AppUserBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_d570e3e37e5899c5, []int{3}
}

func (m *AppUserBalance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppUserBalance.Unmarshal(m, b)
}
func (m *AppUserBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppUserBalance.Marshal(b, m, deterministic)
}
func (m *AppUserBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppUserBalance.Merge(m, src)
}
func (m *AppUserBalance) XXX_Size() int {
	return xxx_messageInfo_AppUserBalance.Size(m)
}
func (m *AppUserBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_AppUserBalance.DiscardUnknown(m)
}

var xxx_messageInfo_AppUserBalance proto.InternalMessageInfo

func (m *AppUserBalance) GetAppUserId() string {
	if m != nil {
		return m.AppUserId
	}
	return ""
}

func (m *AppUserBalance) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *AppUserBalance) GetAppUserCurrencies() []*AppUserCurrency {
	if m != nil {
		return m.AppUserCurrencies
	}
	return nil
}

type AppUserWithdraw struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Addr                 string   `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	CurrencyId           string   `protobuf:"bytes,3,opt,name=currency_id,json=currencyId,proto3" json:"currency_id,omitempty"`
	Amount               string   `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	TxId                 string   `protobuf:"bytes,5,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	AppUserId            string   `protobuf:"bytes,6,opt,name=app_user_id,json=appUserId,proto3" json:"app_user_id,omitempty"`
	CryptoType           string   `protobuf:"bytes,7,opt,name=crypto_type,json=cryptoType,proto3" json:"crypto_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppUserWithdraw) Reset()         { *m = AppUserWithdraw{} }
func (m *AppUserWithdraw) String() string { return proto.CompactTextString(m) }
func (*AppUserWithdraw) ProtoMessage()    {}
func (*AppUserWithdraw) Descriptor() ([]byte, []int) {
	return fileDescriptor_d570e3e37e5899c5, []int{4}
}

func (m *AppUserWithdraw) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppUserWithdraw.Unmarshal(m, b)
}
func (m *AppUserWithdraw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppUserWithdraw.Marshal(b, m, deterministic)
}
func (m *AppUserWithdraw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppUserWithdraw.Merge(m, src)
}
func (m *AppUserWithdraw) XXX_Size() int {
	return xxx_messageInfo_AppUserWithdraw.Size(m)
}
func (m *AppUserWithdraw) XXX_DiscardUnknown() {
	xxx_messageInfo_AppUserWithdraw.DiscardUnknown(m)
}

var xxx_messageInfo_AppUserWithdraw proto.InternalMessageInfo

func (m *AppUserWithdraw) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AppUserWithdraw) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *AppUserWithdraw) GetCurrencyId() string {
	if m != nil {
		return m.CurrencyId
	}
	return ""
}

func (m *AppUserWithdraw) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *AppUserWithdraw) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *AppUserWithdraw) GetAppUserId() string {
	if m != nil {
		return m.AppUserId
	}
	return ""
}

func (m *AppUserWithdraw) GetCryptoType() string {
	if m != nil {
		return m.CryptoType
	}
	return ""
}

type UserAddress struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address              string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Owner                string   `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	MainNet              string   `protobuf:"bytes,4,opt,name=main_net,json=mainNet,proto3" json:"main_net,omitempty"`
	CryptoType           string   `protobuf:"bytes,5,opt,name=crypto_type,json=cryptoType,proto3" json:"crypto_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserAddress) Reset()         { *m = UserAddress{} }
func (m *UserAddress) String() string { return proto.CompactTextString(m) }
func (*UserAddress) ProtoMessage()    {}
func (*UserAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_d570e3e37e5899c5, []int{5}
}

func (m *UserAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserAddress.Unmarshal(m, b)
}
func (m *UserAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserAddress.Marshal(b, m, deterministic)
}
func (m *UserAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAddress.Merge(m, src)
}
func (m *UserAddress) XXX_Size() int {
	return xxx_messageInfo_UserAddress.Size(m)
}
func (m *UserAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAddress.DiscardUnknown(m)
}

var xxx_messageInfo_UserAddress proto.InternalMessageInfo

func (m *UserAddress) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UserAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UserAddress) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *UserAddress) GetMainNet() string {
	if m != nil {
		return m.MainNet
	}
	return ""
}

func (m *UserAddress) GetCryptoType() string {
	if m != nil {
		return m.CryptoType
	}
	return ""
}

func init() {
	proto.RegisterType((*AppUser)(nil), "app.user.AppUser")
	proto.RegisterType((*AppUserCurrency)(nil), "app.user.AppUserCurrency")
	proto.RegisterType((*AppUserTx)(nil), "app.user.AppUserTx")
	proto.RegisterType((*AppUserBalance)(nil), "app.user.AppUserBalance")
	proto.RegisterType((*AppUserWithdraw)(nil), "app.user.AppUserWithdraw")
	proto.RegisterType((*UserAddress)(nil), "app.user.UserAddress")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AppUserServiceClient is the client API for AppUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AppUserServiceClient interface {
	// sign in user
	SignInAppUser(ctx context.Context, in *AppUser, opts ...grpc.CallOption) (*AppUser, error)
	// create tx
	CreateTx(ctx context.Context, in *AppUserTx, opts ...grpc.CallOption) (*AppUserTx, error)
	// send coin
	SendTx(ctx context.Context, in *AppUserTx, opts ...grpc.CallOption) (*AppUserTx, error)
	// get balances
	GetBalance(ctx context.Context, in *AppUser, opts ...grpc.CallOption) (*AppUserBalance, error)
	// withdraw
	Withdraw(ctx context.Context, in *AppUserWithdraw, opts ...grpc.CallOption) (*AppUserWithdraw, error)
	// create user currency address
	CreateUserAddress(ctx context.Context, in *UserAddress, opts ...grpc.CallOption) (*UserAddress, error)
}

type appUserServiceClient struct {
	cc *grpc.ClientConn
}

func NewAppUserServiceClient(cc *grpc.ClientConn) AppUserServiceClient {
	return &appUserServiceClient{cc}
}

func (c *appUserServiceClient) SignInAppUser(ctx context.Context, in *AppUser, opts ...grpc.CallOption) (*AppUser, error) {
	out := new(AppUser)
	err := c.cc.Invoke(ctx, "/app.user.AppUserService/signInAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserServiceClient) CreateTx(ctx context.Context, in *AppUserTx, opts ...grpc.CallOption) (*AppUserTx, error) {
	out := new(AppUserTx)
	err := c.cc.Invoke(ctx, "/app.user.AppUserService/createTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserServiceClient) SendTx(ctx context.Context, in *AppUserTx, opts ...grpc.CallOption) (*AppUserTx, error) {
	out := new(AppUserTx)
	err := c.cc.Invoke(ctx, "/app.user.AppUserService/sendTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserServiceClient) GetBalance(ctx context.Context, in *AppUser, opts ...grpc.CallOption) (*AppUserBalance, error) {
	out := new(AppUserBalance)
	err := c.cc.Invoke(ctx, "/app.user.AppUserService/getBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserServiceClient) Withdraw(ctx context.Context, in *AppUserWithdraw, opts ...grpc.CallOption) (*AppUserWithdraw, error) {
	out := new(AppUserWithdraw)
	err := c.cc.Invoke(ctx, "/app.user.AppUserService/withdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserServiceClient) CreateUserAddress(ctx context.Context, in *UserAddress, opts ...grpc.CallOption) (*UserAddress, error) {
	out := new(UserAddress)
	err := c.cc.Invoke(ctx, "/app.user.AppUserService/createUserAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppUserServiceServer is the server API for AppUserService service.
type AppUserServiceServer interface {
	// sign in user
	SignInAppUser(context.Context, *AppUser) (*AppUser, error)
	// create tx
	CreateTx(context.Context, *AppUserTx) (*AppUserTx, error)
	// send coin
	SendTx(context.Context, *AppUserTx) (*AppUserTx, error)
	// get balances
	GetBalance(context.Context, *AppUser) (*AppUserBalance, error)
	// withdraw
	Withdraw(context.Context, *AppUserWithdraw) (*AppUserWithdraw, error)
	// create user currency address
	CreateUserAddress(context.Context, *UserAddress) (*UserAddress, error)
}

func RegisterAppUserServiceServer(s *grpc.Server, srv AppUserServiceServer) {
	s.RegisterService(&_AppUserService_serviceDesc, srv)
}

func _AppUserService_SignInAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserServiceServer).SignInAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.AppUserService/SignInAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserServiceServer).SignInAppUser(ctx, req.(*AppUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserService_CreateTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppUserTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserServiceServer).CreateTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.AppUserService/CreateTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserServiceServer).CreateTx(ctx, req.(*AppUserTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserService_SendTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppUserTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserServiceServer).SendTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.AppUserService/SendTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserServiceServer).SendTx(ctx, req.(*AppUserTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserService_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserServiceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.AppUserService/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserServiceServer).GetBalance(ctx, req.(*AppUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserService_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppUserWithdraw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserServiceServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.AppUserService/Withdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserServiceServer).Withdraw(ctx, req.(*AppUserWithdraw))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserService_CreateUserAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserServiceServer).CreateUserAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.AppUserService/CreateUserAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserServiceServer).CreateUserAddress(ctx, req.(*UserAddress))
	}
	return interceptor(ctx, in, info, handler)
}

var _AppUserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "app.user.AppUserService",
	HandlerType: (*AppUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "signInAppUser",
			Handler:    _AppUserService_SignInAppUser_Handler,
		},
		{
			MethodName: "createTx",
			Handler:    _AppUserService_CreateTx_Handler,
		},
		{
			MethodName: "sendTx",
			Handler:    _AppUserService_SendTx_Handler,
		},
		{
			MethodName: "getBalance",
			Handler:    _AppUserService_GetBalance_Handler,
		},
		{
			MethodName: "withdraw",
			Handler:    _AppUserService_Withdraw_Handler,
		},
		{
			MethodName: "createUserAddress",
			Handler:    _AppUserService_CreateUserAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user.proto",
}

func init() { proto.RegisterFile("proto/user.proto", fileDescriptor_d570e3e37e5899c5) }

var fileDescriptor_d570e3e37e5899c5 = []byte{
	// 823 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x4f, 0x8f, 0xe3, 0x34,
	0x14, 0x6f, 0xd2, 0xb4, 0x49, 0x5f, 0x77, 0x66, 0x5a, 0xef, 0x0e, 0x64, 0x0a, 0x0c, 0x55, 0x2e,
	0x0c, 0x88, 0xe9, 0x88, 0x05, 0xc1, 0x81, 0x53, 0xbb, 0x07, 0x54, 0xad, 0x84, 0x46, 0xdd, 0x22,
	0x24, 0x2e, 0x91, 0x27, 0xf6, 0x0e, 0xd1, 0xb4, 0x89, 0x65, 0xbb, 0x3b, 0xc9, 0x8d, 0x2b, 0xe2,
	0xc2, 0x67, 0xe0, 0xb3, 0xf0, 0x49, 0xf8, 0x1e, 0x48, 0xc8, 0x8e, 0xd3, 0xe6, 0x4f, 0x47, 0xc0,
	0xcd, 0xef, 0xbd, 0x9f, 0xe3, 0xf7, 0x7e, 0xbf, 0x9f, 0x1d, 0x18, 0x31, 0x9e, 0xca, 0xf4, 0x66,
	0x27, 0x28, 0x9f, 0xe9, 0x25, 0xf2, 0x30, 0x63, 0x33, 0x15, 0x07, 0xbf, 0xd8, 0xe0, 0xce, 0x19,
	0xfb, 0x41, 0x50, 0x8e, 0x4e, 0xc1, 0x8e, 0x89, 0x6f, 0x4d, 0xad, 0xab, 0xc1, 0xca, 0x8e, 0x09,
	0x3a, 0x87, 0x3e, 0x66, 0x2c, 0x8c, 0x89, 0x6f, 0xeb, 0x5c, 0x0f, 0x33, 0xb6, 0x24, 0xe8, 0x23,
	0x00, 0x41, 0x85, 0x88, 0xd3, 0x44, 0x95, 0xba, 0xba, 0x34, 0x30, 0x99, 0x25, 0x41, 0x9f, 0x03,
	0x12, 0x34, 0xe2, 0x54, 0x86, 0x8c, 0xc7, 0xef, 0xb0, 0xa4, 0xe1, 0x03, 0xcd, 0x7d, 0x47, 0xc3,
	0x46, 0x45, 0xe5, 0xb6, 0x28, 0xbc, 0xa6, 0x39, 0xfa, 0x0c, 0xc6, 0x25, 0x7a, 0x77, 0xb7, 0x89,
	0x23, 0x0d, 0xee, 0x69, 0xf0, 0x99, 0x01, 0xeb, 0xbc, 0xc2, 0xbe, 0x80, 0x5e, 0x92, 0x26, 0x11,
	0xf5, 0xfb, 0x45, 0x3b, 0x3a, 0x40, 0x97, 0x30, 0x54, 0x5d, 0xaa, 0x69, 0x54, 0x3f, 0x6e, 0xd1,
	0x0f, 0x2e, 0x66, 0x5a, 0x12, 0xf4, 0x31, 0x0c, 0x23, 0x9e, 0x33, 0x99, 0x86, 0x32, 0x67, 0xd4,
	0xf7, 0x74, 0x1d, 0x8a, 0xd4, 0x3a, 0x67, 0x34, 0xf8, 0xcd, 0x86, 0x33, 0x43, 0xc1, 0xab, 0x1d,
	0xe7, 0x34, 0x89, 0xf2, 0x16, 0x15, 0x97, 0x30, 0x14, 0xb9, 0xd8, 0x1f, 0x62, 0x9b, 0xa1, 0x73,
	0x61, 0x0e, 0x79, 0x1f, 0xdc, 0x3b, 0x9c, 0x3c, 0x1c, 0x08, 0xe9, 0xab, 0x70, 0x49, 0xd0, 0x07,
	0x30, 0x88, 0xd2, 0x38, 0x29, 0xce, 0x2e, 0x48, 0xf0, 0x54, 0x42, 0x9d, 0x8c, 0x2e, 0xc0, 0xdb,
	0xe2, 0x38, 0x09, 0x13, 0x2a, 0xcd, 0xcc, 0xae, 0x8a, 0xbf, 0xa7, 0x12, 0xf9, 0xea, 0x83, 0x1b,
	0x7c, 0x98, 0xb6, 0x0c, 0xd1, 0x27, 0x70, 0x86, 0x09, 0xe1, 0x54, 0x88, 0xb0, 0x44, 0x14, 0x33,
	0x9f, 0x9a, 0xf4, 0xc2, 0x00, 0x7d, 0x70, 0x4d, 0xc6, 0x0c, 0x5d, 0x86, 0x68, 0x02, 0x1e, 0xa1,
	0x51, 0xbc, 0xc5, 0x1b, 0xe1, 0x0f, 0xa6, 0xd6, 0xd5, 0xc9, 0x6a, 0x1f, 0x07, 0x7f, 0x75, 0x61,
	0x60, 0xd8, 0x58, 0x67, 0xff, 0xd5, 0x12, 0x53, 0x78, 0xf6, 0x96, 0xa7, 0xdb, 0x3d, 0x3f, 0x05,
	0x07, 0xa0, 0x72, 0x86, 0xa0, 0x0f, 0x01, 0x64, 0xba, 0xaf, 0x1b, 0x22, 0x64, 0x6a, 0xaa, 0x5f,
	0xc0, 0xf9, 0x61, 0x7f, 0x64, 0x44, 0x50, 0xc0, 0x82, 0x15, 0x54, 0x7e, 0xa8, 0xd4, 0x67, 0x49,
	0xd0, 0x7b, 0xd0, 0xc7, 0xdb, 0x74, 0x97, 0x48, 0xc3, 0x8f, 0x89, 0xaa, 0x4a, 0xb8, 0x35, 0x25,
	0x46, 0xd0, 0x7d, 0x4b, 0x0b, 0xfd, 0x9d, 0x95, 0x5a, 0xd6, 0xb5, 0x19, 0x34, 0xb4, 0xa9, 0xb0,
	0x07, 0x75, 0xf6, 0xaa, 0xaa, 0x0d, 0xeb, 0xaa, 0x5d, 0x80, 0x27, 0x39, 0x26, 0x34, 0xc4, 0xd2,
	0x7f, 0xa6, 0x0f, 0x72, 0x75, 0x3c, 0x97, 0x8d, 0x5b, 0x73, 0xd2, 0xbc, 0x35, 0x55, 0x49, 0x4e,
	0xeb, 0x92, 0xa8, 0x3e, 0x65, 0x16, 0x0a, 0x89, 0xe5, 0x4e, 0xf8, 0x67, 0x45, 0x51, 0x66, 0x6f,
	0x74, 0x8c, 0x10, 0x38, 0x51, 0x4a, 0xa8, 0x3f, 0xd2, 0x5f, 0xd4, 0xeb, 0xa6, 0xe5, 0xc7, 0x2d,
	0xcb, 0xff, 0x6e, 0xc1, 0xa9, 0x11, 0xb9, 0x74, 0x4b, 0xe3, 0x1a, 0x59, 0xcd, 0x6b, 0xf4, 0x84,
	0xf2, 0xdf, 0xc1, 0x18, 0xd7, 0xee, 0x4e, 0x4c, 0x85, 0xdf, 0x9d, 0x76, 0xaf, 0x86, 0x2f, 0x2f,
	0x66, 0xe5, 0x2b, 0x33, 0x6b, 0x5c, 0xaf, 0x55, 0x7b, 0x4f, 0xf0, 0xa7, 0xb5, 0xbf, 0x85, 0x3f,
	0xc6, 0xf2, 0x67, 0xc2, 0xf1, 0x63, 0xcb, 0x7d, 0x08, 0x1c, 0x25, 0x82, 0xe9, 0x40, 0xaf, 0xf5,
	0xac, 0x15, 0xc3, 0x18, 0xe7, 0x45, 0xc7, 0x8c, 0xe2, 0xd4, 0x8c, 0xf2, 0x1c, 0x7a, 0x32, 0x3b,
	0x78, 0xcc, 0x91, 0xd9, 0x92, 0x34, 0x59, 0xe8, 0xff, 0xcb, 0x63, 0xe2, 0xb6, 0x98, 0xfd, 0xd5,
	0x82, 0xa1, 0xc2, 0xce, 0x8d, 0x59, 0x9a, 0x23, 0x54, 0x6c, 0x65, 0xd7, 0x6d, 0xf5, 0x02, 0x7a,
	0xe9, 0x63, 0x42, 0xb9, 0x19, 0xa1, 0x08, 0x6a, 0x66, 0x73, 0xea, 0x66, 0x6b, 0xf4, 0xd2, 0x6b,
	0xf6, 0xf2, 0xf2, 0x6f, 0x7b, 0xaf, 0xf2, 0x1b, 0xca, 0xdf, 0xc5, 0x11, 0x45, 0xdf, 0xc0, 0x89,
	0x88, 0xef, 0x93, 0x65, 0x52, 0xbe, 0xf9, 0xe3, 0x96, 0x48, 0x93, 0x76, 0x2a, 0xe8, 0xa0, 0xaf,
	0xc1, 0x8b, 0x38, 0xc5, 0x92, 0xae, 0x33, 0xf4, 0xbc, 0x05, 0x58, 0x67, 0x93, 0x63, 0xc9, 0xa0,
	0x83, 0xbe, 0x82, 0xbe, 0xa0, 0x09, 0xf9, 0x9f, 0xbb, 0xbe, 0x05, 0xb8, 0xa7, 0xb2, 0xb4, 0xe6,
	0x91, 0x1e, 0xfd, 0x56, 0xca, 0x80, 0x83, 0x0e, 0x5a, 0x80, 0xf7, 0x58, 0x3a, 0xa8, 0xed, 0xc1,
	0xd2, 0x5c, 0x93, 0xa7, 0x4b, 0x41, 0x07, 0xbd, 0x82, 0x71, 0x31, 0x6e, 0x55, 0xcb, 0xf3, 0xc3,
	0x8e, 0x4a, 0x7a, 0x72, 0x3c, 0x1d, 0x74, 0x16, 0x21, 0x5c, 0x46, 0xe9, 0x76, 0x86, 0x1f, 0x68,
	0x3e, 0xc3, 0x2c, 0x56, 0x30, 0xf5, 0x16, 0xcd, 0xee, 0x39, 0x8b, 0x34, 0x7e, 0x31, 0x50, 0x1b,
	0x6e, 0xd5, 0x2f, 0xf9, 0xd6, 0xfa, 0xe9, 0x53, 0x05, 0xbc, 0xc6, 0x8c, 0x5d, 0x2b, 0xd4, 0x35,
	0xcd, 0xf0, 0x96, 0x6d, 0xa8, 0xb8, 0x51, 0xf0, 0x9b, 0x32, 0xad, 0xff, 0xe2, 0x7f, 0xd8, 0xce,
	0xfc, 0x35, 0xcd, 0xef, 0xfa, 0xfa, 0x6f, 0xfe, 0xe5, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb5,
	0xe7, 0x02, 0x36, 0xe1, 0x07, 0x00, 0x00,
}
