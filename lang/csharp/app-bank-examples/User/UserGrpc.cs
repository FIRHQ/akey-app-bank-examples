// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: user.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace App.User {
  public static partial class AppUserService
  {
    static readonly string __ServiceName = "app.user.AppUserService";

    static readonly grpc::Marshaller<global::App.User.AppUser> __Marshaller_app_user_AppUser = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::App.User.AppUser.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::App.User.AppUserTx> __Marshaller_app_user_AppUserTx = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::App.User.AppUserTx.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::App.User.AppUserBalance> __Marshaller_app_user_AppUserBalance = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::App.User.AppUserBalance.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::App.User.AppUserWithdraw> __Marshaller_app_user_AppUserWithdraw = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::App.User.AppUserWithdraw.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::App.User.UserAddress> __Marshaller_app_user_UserAddress = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::App.User.UserAddress.Parser.ParseFrom);

    static readonly grpc::Method<global::App.User.AppUser, global::App.User.AppUser> __Method_signInAppUser = new grpc::Method<global::App.User.AppUser, global::App.User.AppUser>(
        grpc::MethodType.Unary,
        __ServiceName,
        "signInAppUser",
        __Marshaller_app_user_AppUser,
        __Marshaller_app_user_AppUser);

    static readonly grpc::Method<global::App.User.AppUserTx, global::App.User.AppUserTx> __Method_createTx = new grpc::Method<global::App.User.AppUserTx, global::App.User.AppUserTx>(
        grpc::MethodType.Unary,
        __ServiceName,
        "createTx",
        __Marshaller_app_user_AppUserTx,
        __Marshaller_app_user_AppUserTx);

    static readonly grpc::Method<global::App.User.AppUserTx, global::App.User.AppUserTx> __Method_sendTx = new grpc::Method<global::App.User.AppUserTx, global::App.User.AppUserTx>(
        grpc::MethodType.Unary,
        __ServiceName,
        "sendTx",
        __Marshaller_app_user_AppUserTx,
        __Marshaller_app_user_AppUserTx);

    static readonly grpc::Method<global::App.User.AppUser, global::App.User.AppUserBalance> __Method_getBalance = new grpc::Method<global::App.User.AppUser, global::App.User.AppUserBalance>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getBalance",
        __Marshaller_app_user_AppUser,
        __Marshaller_app_user_AppUserBalance);

    static readonly grpc::Method<global::App.User.AppUserWithdraw, global::App.User.AppUserWithdraw> __Method_withdraw = new grpc::Method<global::App.User.AppUserWithdraw, global::App.User.AppUserWithdraw>(
        grpc::MethodType.Unary,
        __ServiceName,
        "withdraw",
        __Marshaller_app_user_AppUserWithdraw,
        __Marshaller_app_user_AppUserWithdraw);

    static readonly grpc::Method<global::App.User.UserAddress, global::App.User.UserAddress> __Method_createUserAddress = new grpc::Method<global::App.User.UserAddress, global::App.User.UserAddress>(
        grpc::MethodType.Unary,
        __ServiceName,
        "createUserAddress",
        __Marshaller_app_user_UserAddress,
        __Marshaller_app_user_UserAddress);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::App.User.UserReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of AppUserService</summary>
    public abstract partial class AppUserServiceBase
    {
      /// <summary>
      /// sign in user
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::App.User.AppUser> signInAppUser(global::App.User.AppUser request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// create tx
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::App.User.AppUserTx> createTx(global::App.User.AppUserTx request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// send coin
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::App.User.AppUserTx> sendTx(global::App.User.AppUserTx request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get balances
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::App.User.AppUserBalance> getBalance(global::App.User.AppUser request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// withdraw
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::App.User.AppUserWithdraw> withdraw(global::App.User.AppUserWithdraw request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// create user currency address
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::App.User.UserAddress> createUserAddress(global::App.User.UserAddress request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for AppUserService</summary>
    public partial class AppUserServiceClient : grpc::ClientBase<AppUserServiceClient>
    {
      /// <summary>Creates a new client for AppUserService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public AppUserServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for AppUserService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public AppUserServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected AppUserServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected AppUserServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// sign in user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::App.User.AppUser signInAppUser(global::App.User.AppUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return signInAppUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// sign in user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::App.User.AppUser signInAppUser(global::App.User.AppUser request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_signInAppUser, null, options, request);
      }
      /// <summary>
      /// sign in user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::App.User.AppUser> signInAppUserAsync(global::App.User.AppUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return signInAppUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// sign in user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::App.User.AppUser> signInAppUserAsync(global::App.User.AppUser request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_signInAppUser, null, options, request);
      }
      /// <summary>
      /// create tx
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::App.User.AppUserTx createTx(global::App.User.AppUserTx request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createTx(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// create tx
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::App.User.AppUserTx createTx(global::App.User.AppUserTx request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_createTx, null, options, request);
      }
      /// <summary>
      /// create tx
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::App.User.AppUserTx> createTxAsync(global::App.User.AppUserTx request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createTxAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// create tx
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::App.User.AppUserTx> createTxAsync(global::App.User.AppUserTx request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_createTx, null, options, request);
      }
      /// <summary>
      /// send coin
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::App.User.AppUserTx sendTx(global::App.User.AppUserTx request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return sendTx(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// send coin
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::App.User.AppUserTx sendTx(global::App.User.AppUserTx request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_sendTx, null, options, request);
      }
      /// <summary>
      /// send coin
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::App.User.AppUserTx> sendTxAsync(global::App.User.AppUserTx request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return sendTxAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// send coin
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::App.User.AppUserTx> sendTxAsync(global::App.User.AppUserTx request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_sendTx, null, options, request);
      }
      /// <summary>
      /// get balances
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::App.User.AppUserBalance getBalance(global::App.User.AppUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getBalance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get balances
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::App.User.AppUserBalance getBalance(global::App.User.AppUser request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getBalance, null, options, request);
      }
      /// <summary>
      /// get balances
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::App.User.AppUserBalance> getBalanceAsync(global::App.User.AppUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getBalanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get balances
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::App.User.AppUserBalance> getBalanceAsync(global::App.User.AppUser request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getBalance, null, options, request);
      }
      /// <summary>
      /// withdraw
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::App.User.AppUserWithdraw withdraw(global::App.User.AppUserWithdraw request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return withdraw(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// withdraw
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::App.User.AppUserWithdraw withdraw(global::App.User.AppUserWithdraw request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_withdraw, null, options, request);
      }
      /// <summary>
      /// withdraw
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::App.User.AppUserWithdraw> withdrawAsync(global::App.User.AppUserWithdraw request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return withdrawAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// withdraw
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::App.User.AppUserWithdraw> withdrawAsync(global::App.User.AppUserWithdraw request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_withdraw, null, options, request);
      }
      /// <summary>
      /// create user currency address
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::App.User.UserAddress createUserAddress(global::App.User.UserAddress request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createUserAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// create user currency address
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::App.User.UserAddress createUserAddress(global::App.User.UserAddress request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_createUserAddress, null, options, request);
      }
      /// <summary>
      /// create user currency address
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::App.User.UserAddress> createUserAddressAsync(global::App.User.UserAddress request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createUserAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// create user currency address
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::App.User.UserAddress> createUserAddressAsync(global::App.User.UserAddress request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_createUserAddress, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override AppUserServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AppUserServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(AppUserServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_signInAppUser, serviceImpl.signInAppUser)
          .AddMethod(__Method_createTx, serviceImpl.createTx)
          .AddMethod(__Method_sendTx, serviceImpl.sendTx)
          .AddMethod(__Method_getBalance, serviceImpl.getBalance)
          .AddMethod(__Method_withdraw, serviceImpl.withdraw)
          .AddMethod(__Method_createUserAddress, serviceImpl.createUserAddress).Build();
    }

  }
}
#endregion
