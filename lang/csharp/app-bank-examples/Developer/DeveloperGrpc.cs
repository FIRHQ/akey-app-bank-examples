// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: developer.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Developer {
  public static partial class DeveloperService
  {
    static readonly string __ServiceName = "developer.DeveloperService";

    static readonly grpc::Marshaller<global::Developer.SessionRequest> __Marshaller_developer_SessionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Developer.SessionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Developer.Session> __Marshaller_developer_Session = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Developer.Session.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Developer.AppBankBalance> __Marshaller_developer_AppBankBalance = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Developer.AppBankBalance.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Developer.AllocateGas> __Marshaller_developer_AllocateGas = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Developer.AllocateGas.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Developer.UnAllocateGas> __Marshaller_developer_UnAllocateGas = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Developer.UnAllocateGas.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Developer.BankTx> __Marshaller_developer_BankTx = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Developer.BankTx.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Developer.BankAddress> __Marshaller_developer_BankAddress = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Developer.BankAddress.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Developer.AppBank> __Marshaller_developer_AppBank = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Developer.AppBank.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Developer.AppBankCurrency> __Marshaller_developer_AppBankCurrency = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Developer.AppBankCurrency.Parser.ParseFrom);

    static readonly grpc::Method<global::Developer.SessionRequest, global::Developer.Session> __Method_initSession = new grpc::Method<global::Developer.SessionRequest, global::Developer.Session>(
        grpc::MethodType.Unary,
        __ServiceName,
        "initSession",
        __Marshaller_developer_SessionRequest,
        __Marshaller_developer_Session);

    static readonly grpc::Method<global::Developer.Session, global::Developer.AppBankBalance> __Method_getBalance = new grpc::Method<global::Developer.Session, global::Developer.AppBankBalance>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getBalance",
        __Marshaller_developer_Session,
        __Marshaller_developer_AppBankBalance);

    static readonly grpc::Method<global::Developer.AllocateGas, global::Developer.AllocateGas> __Method_allocateGas = new grpc::Method<global::Developer.AllocateGas, global::Developer.AllocateGas>(
        grpc::MethodType.Unary,
        __ServiceName,
        "allocateGas",
        __Marshaller_developer_AllocateGas,
        __Marshaller_developer_AllocateGas);

    static readonly grpc::Method<global::Developer.UnAllocateGas, global::Developer.UnAllocateGas> __Method_unallocateGas = new grpc::Method<global::Developer.UnAllocateGas, global::Developer.UnAllocateGas>(
        grpc::MethodType.Unary,
        __ServiceName,
        "unallocateGas",
        __Marshaller_developer_UnAllocateGas,
        __Marshaller_developer_UnAllocateGas);

    static readonly grpc::Method<global::Developer.BankTx, global::Developer.BankTx> __Method_createBankTx = new grpc::Method<global::Developer.BankTx, global::Developer.BankTx>(
        grpc::MethodType.Unary,
        __ServiceName,
        "createBankTx",
        __Marshaller_developer_BankTx,
        __Marshaller_developer_BankTx);

    static readonly grpc::Method<global::Developer.BankTx, global::Developer.BankTx> __Method_sendTxFromBank = new grpc::Method<global::Developer.BankTx, global::Developer.BankTx>(
        grpc::MethodType.Unary,
        __ServiceName,
        "sendTxFromBank",
        __Marshaller_developer_BankTx,
        __Marshaller_developer_BankTx);

    static readonly grpc::Method<global::Developer.BankAddress, global::Developer.BankAddress> __Method_createBankAddress = new grpc::Method<global::Developer.BankAddress, global::Developer.BankAddress>(
        grpc::MethodType.Unary,
        __ServiceName,
        "createBankAddress",
        __Marshaller_developer_BankAddress,
        __Marshaller_developer_BankAddress);

    static readonly grpc::Method<global::Developer.AppBank, global::Developer.AppBank> __Method_createBank = new grpc::Method<global::Developer.AppBank, global::Developer.AppBank>(
        grpc::MethodType.Unary,
        __ServiceName,
        "createBank",
        __Marshaller_developer_AppBank,
        __Marshaller_developer_AppBank);

    static readonly grpc::Method<global::Developer.AppBankCurrency, global::Developer.AppBankCurrency> __Method_createBankCurrency = new grpc::Method<global::Developer.AppBankCurrency, global::Developer.AppBankCurrency>(
        grpc::MethodType.Unary,
        __ServiceName,
        "createBankCurrency",
        __Marshaller_developer_AppBankCurrency,
        __Marshaller_developer_AppBankCurrency);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Developer.DeveloperReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of DeveloperService</summary>
    public abstract partial class DeveloperServiceBase
    {
      /// <summary>
      /// developer init session
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Developer.Session> initSession(global::Developer.SessionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// get currencies
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Developer.AppBankBalance> getBalance(global::Developer.Session request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// allocate gas
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Developer.AllocateGas> allocateGas(global::Developer.AllocateGas request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// unallocate gas
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Developer.UnAllocateGas> unallocateGas(global::Developer.UnAllocateGas request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// create bank tx
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Developer.BankTx> createBankTx(global::Developer.BankTx request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// send coin from bank
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Developer.BankTx> sendTxFromBank(global::Developer.BankTx request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// create bank currency address
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Developer.BankAddress> createBankAddress(global::Developer.BankAddress request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// create bank
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Developer.AppBank> createBank(global::Developer.AppBank request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// create bank currency
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Developer.AppBankCurrency> createBankCurrency(global::Developer.AppBankCurrency request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DeveloperService</summary>
    public partial class DeveloperServiceClient : grpc::ClientBase<DeveloperServiceClient>
    {
      /// <summary>Creates a new client for DeveloperService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DeveloperServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DeveloperService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DeveloperServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DeveloperServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DeveloperServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// developer init session
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Developer.Session initSession(global::Developer.SessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return initSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// developer init session
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Developer.Session initSession(global::Developer.SessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_initSession, null, options, request);
      }
      /// <summary>
      /// developer init session
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Developer.Session> initSessionAsync(global::Developer.SessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return initSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// developer init session
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Developer.Session> initSessionAsync(global::Developer.SessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_initSession, null, options, request);
      }
      /// <summary>
      /// get currencies
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Developer.AppBankBalance getBalance(global::Developer.Session request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getBalance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get currencies
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Developer.AppBankBalance getBalance(global::Developer.Session request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getBalance, null, options, request);
      }
      /// <summary>
      /// get currencies
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Developer.AppBankBalance> getBalanceAsync(global::Developer.Session request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getBalanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// get currencies
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Developer.AppBankBalance> getBalanceAsync(global::Developer.Session request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getBalance, null, options, request);
      }
      /// <summary>
      /// allocate gas
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Developer.AllocateGas allocateGas(global::Developer.AllocateGas request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return allocateGas(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// allocate gas
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Developer.AllocateGas allocateGas(global::Developer.AllocateGas request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_allocateGas, null, options, request);
      }
      /// <summary>
      /// allocate gas
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Developer.AllocateGas> allocateGasAsync(global::Developer.AllocateGas request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return allocateGasAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// allocate gas
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Developer.AllocateGas> allocateGasAsync(global::Developer.AllocateGas request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_allocateGas, null, options, request);
      }
      /// <summary>
      /// unallocate gas
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Developer.UnAllocateGas unallocateGas(global::Developer.UnAllocateGas request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return unallocateGas(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// unallocate gas
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Developer.UnAllocateGas unallocateGas(global::Developer.UnAllocateGas request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_unallocateGas, null, options, request);
      }
      /// <summary>
      /// unallocate gas
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Developer.UnAllocateGas> unallocateGasAsync(global::Developer.UnAllocateGas request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return unallocateGasAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// unallocate gas
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Developer.UnAllocateGas> unallocateGasAsync(global::Developer.UnAllocateGas request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_unallocateGas, null, options, request);
      }
      /// <summary>
      /// create bank tx
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Developer.BankTx createBankTx(global::Developer.BankTx request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createBankTx(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// create bank tx
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Developer.BankTx createBankTx(global::Developer.BankTx request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_createBankTx, null, options, request);
      }
      /// <summary>
      /// create bank tx
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Developer.BankTx> createBankTxAsync(global::Developer.BankTx request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createBankTxAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// create bank tx
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Developer.BankTx> createBankTxAsync(global::Developer.BankTx request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_createBankTx, null, options, request);
      }
      /// <summary>
      /// send coin from bank
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Developer.BankTx sendTxFromBank(global::Developer.BankTx request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return sendTxFromBank(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// send coin from bank
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Developer.BankTx sendTxFromBank(global::Developer.BankTx request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_sendTxFromBank, null, options, request);
      }
      /// <summary>
      /// send coin from bank
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Developer.BankTx> sendTxFromBankAsync(global::Developer.BankTx request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return sendTxFromBankAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// send coin from bank
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Developer.BankTx> sendTxFromBankAsync(global::Developer.BankTx request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_sendTxFromBank, null, options, request);
      }
      /// <summary>
      /// create bank currency address
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Developer.BankAddress createBankAddress(global::Developer.BankAddress request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createBankAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// create bank currency address
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Developer.BankAddress createBankAddress(global::Developer.BankAddress request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_createBankAddress, null, options, request);
      }
      /// <summary>
      /// create bank currency address
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Developer.BankAddress> createBankAddressAsync(global::Developer.BankAddress request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createBankAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// create bank currency address
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Developer.BankAddress> createBankAddressAsync(global::Developer.BankAddress request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_createBankAddress, null, options, request);
      }
      /// <summary>
      /// create bank
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Developer.AppBank createBank(global::Developer.AppBank request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createBank(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// create bank
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Developer.AppBank createBank(global::Developer.AppBank request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_createBank, null, options, request);
      }
      /// <summary>
      /// create bank
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Developer.AppBank> createBankAsync(global::Developer.AppBank request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createBankAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// create bank
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Developer.AppBank> createBankAsync(global::Developer.AppBank request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_createBank, null, options, request);
      }
      /// <summary>
      /// create bank currency
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Developer.AppBankCurrency createBankCurrency(global::Developer.AppBankCurrency request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createBankCurrency(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// create bank currency
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Developer.AppBankCurrency createBankCurrency(global::Developer.AppBankCurrency request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_createBankCurrency, null, options, request);
      }
      /// <summary>
      /// create bank currency
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Developer.AppBankCurrency> createBankCurrencyAsync(global::Developer.AppBankCurrency request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return createBankCurrencyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// create bank currency
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Developer.AppBankCurrency> createBankCurrencyAsync(global::Developer.AppBankCurrency request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_createBankCurrency, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override DeveloperServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DeveloperServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DeveloperServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_initSession, serviceImpl.initSession)
          .AddMethod(__Method_getBalance, serviceImpl.getBalance)
          .AddMethod(__Method_allocateGas, serviceImpl.allocateGas)
          .AddMethod(__Method_unallocateGas, serviceImpl.unallocateGas)
          .AddMethod(__Method_createBankTx, serviceImpl.createBankTx)
          .AddMethod(__Method_sendTxFromBank, serviceImpl.sendTxFromBank)
          .AddMethod(__Method_createBankAddress, serviceImpl.createBankAddress)
          .AddMethod(__Method_createBank, serviceImpl.createBank)
          .AddMethod(__Method_createBankCurrency, serviceImpl.createBankCurrency).Build();
    }

  }
}
#endregion
