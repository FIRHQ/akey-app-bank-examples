// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: developer.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Developer {

  /// <summary>Holder for reflection information generated from developer.proto</summary>
  public static partial class DeveloperReflection {

    #region Descriptor
    /// <summary>File descriptor for developer.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DeveloperReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9kZXZlbG9wZXIucHJvdG8SCWRldmVsb3BlchobZ29vZ2xlL3Byb3RvYnVm",
            "L2VtcHR5LnByb3RvIvcBCglEZXZlbG9wZXISCgoCaWQYASABKAkSDwoHdXNl",
            "cl9pZBgCIAEoCRIOCgZtb2JpbGUYAyABKAkSDQoFZW1haWwYBCABKAkSFgoO",
            "aWRfY2FyZF9udW1iZXIYBSABKAkSEQoJcmVhbF9uYW1lGAYgASgJEhMKC3By",
            "aXZhdGVfa2V5GAcgASgJEhIKCnB1YmxpY19rZXkYCCABKAkSEgoKYWNjZXNz",
            "X2tleRgJIAEoCRIRCgljcmVhdGVfYXQYCiABKAQSEQoJdXBkYXRlX2F0GAsg",
            "ASgEEg4KBmFjdGl2ZRgMIAEoCBIQCgh2ZXJpZmllZBgNIAEoCCJsCgdTZXNz",
            "aW9uEhIKCnNlc3Npb25faWQYASABKAkSFAoMZGV2ZWxvcGVyX2lkGAIgASgJ",
            "EhIKCnNlY3JldF9rZXkYAyABKAkSDgoGYXBwX2lkGAQgASgJEhMKC2NyeXB0",
            "b190eXBlGAUgASgJIjkKDlNlc3Npb25SZXF1ZXN0EhIKCmFjY2Vzc19rZXkY",
            "ASABKAkSEwoLY3J5cHRvX3R5cGUYAiABKAkiQAoHQXBwQmFuaxIKCgJpZBgB",
            "IAEoCRIUCgxkZXZlbG9wZXJfaWQYAiABKAkSEwoLY3J5cHRvX3R5cGUYAyAB",
            "KAki1AEKD0FwcEJhbmtDdXJyZW5jeRIKCgJpZBgBIAEoCRIPCgdiYW5rX2lk",
            "GAIgASgJEhEKCWNvaW5fdHlwZRgDIAEoCRIPCgdiYWxhbmNlGAQgASgJEhAK",
            "CG1haW5fbmV0GAUgASgJEhAKCGdhc19yYXRlGAYgASgBEgsKA2dhcxgHIAEo",
            "DRIXCg9hZGRyZXNzX2JhbGFuY2UYCCABKAkSDwoHYWRkcmVzcxgJIAEoCRIQ",
            "CghkZWNpbWFscxgKIAEoDRITCgtjcnlwdG9fdHlwZRgLIAEoCSJiCgtBbGxv",
            "Y2F0ZUdhcxIKCgJpZBgBIAEoCRIQCghtYWluX25ldBgCIAEoCRIQCghnYXNf",
            "dHlwZRgDIAEoCRIPCgdkZWNpbWFsGAQgASgNEhIKCnNlc3Npb25faWQYBSAB",
            "KAkiZAoNVW5BbGxvY2F0ZUdhcxIKCgJpZBgBIAEoCRIQCghtYWluX25ldBgC",
            "IAEoCRIQCghnYXNfdHlwZRgDIAEoCRIPCgdkZWNpbWFsGAQgASgNEhIKCnNl",
            "c3Npb25faWQYBSABKAkiRQoOQXBwQmFua0JhbGFuY2USMwoPYmFua19jdXJy",
            "ZW5jaWVzGAEgAygLMhouZGV2ZWxvcGVyLkFwcEJhbmtDdXJyZW5jeSKFAgoG",
            "QmFua1R4EgoKAmlkGAEgASgJEg8KB2JhbmtfaWQYAiABKAkSDwoHdHhfdHlw",
            "ZRgDIAEoCRIOCgZhcHBfaWQYBCABKAkSEwoLYXBwX3VzZXJfaWQYBSABKAkS",
            "EQoJY29pbl90eXBlGAYgASgJEg4KBmFtb3VudBgHIAEoCRIQCghtYWluX25l",
            "dBgIIAEoCRIQCgh0cmFkZV9hdBgJIAEoBBISCgpzZXNzaW9uX2lkGAogASgJ",
            "EhMKC2N1cnJlbmN5X2lkGAsgASgJEhAKCGRlY2ltYWxzGAwgASgNEhEKCXR4",
            "X3N0YXR1cxgNIAEoDRITCgtjcnlwdG9fdHlwZRgOIAEoCSJ1CgtCYW5rQWRk",
            "cmVzcxIKCgJpZBgBIAEoCRIPCgdhZGRyZXNzGAIgASgJEg0KBW93bmVyGAMg",
            "ASgJEhMKC3ByaXZhdGVfa2V5GAQgASgJEhAKCG1haW5fbmV0GAUgASgJEhMK",
            "C2NyeXB0b190eXBlGAYgASgJMssBChBEZXZlbG9wZXJTZXJ2aWNlEj4KC2lu",
            "aXRTZXNzaW9uEhkuZGV2ZWxvcGVyLlNlc3Npb25SZXF1ZXN0GhIuZGV2ZWxv",
            "cGVyLlNlc3Npb24iABI9CgpnZXRCYWxhbmNlEhIuZGV2ZWxvcGVyLlNlc3Np",
            "b24aGS5kZXZlbG9wZXIuQXBwQmFua0JhbGFuY2UiABI4Cg5zZW5kVHhGcm9t",
            "QmFuaxIRLmRldmVsb3Blci5CYW5rVHgaES5kZXZlbG9wZXIuQmFua1R4IgBC",
            "PgojY29tLmFrZXkuYXBpLmFwcGJhbmsuZ3JwYy5kZXZlbG9wZXJCDkRldmVs",
            "b3BlclByb3RvUAGiAgRBS2V5YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Developer.Developer), global::Developer.Developer.Parser, new[]{ "Id", "UserId", "Mobile", "Email", "IdCardNumber", "RealName", "PrivateKey", "PublicKey", "AccessKey", "CreateAt", "UpdateAt", "Active", "Verified" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Developer.Session), global::Developer.Session.Parser, new[]{ "SessionId", "DeveloperId", "SecretKey", "AppId", "CryptoType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Developer.SessionRequest), global::Developer.SessionRequest.Parser, new[]{ "AccessKey", "CryptoType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Developer.AppBank), global::Developer.AppBank.Parser, new[]{ "Id", "DeveloperId", "CryptoType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Developer.AppBankCurrency), global::Developer.AppBankCurrency.Parser, new[]{ "Id", "BankId", "CoinType", "Balance", "MainNet", "GasRate", "Gas", "AddressBalance", "Address", "Decimals", "CryptoType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Developer.AllocateGas), global::Developer.AllocateGas.Parser, new[]{ "Id", "MainNet", "GasType", "Decimal", "SessionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Developer.UnAllocateGas), global::Developer.UnAllocateGas.Parser, new[]{ "Id", "MainNet", "GasType", "Decimal", "SessionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Developer.AppBankBalance), global::Developer.AppBankBalance.Parser, new[]{ "BankCurrencies" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Developer.BankTx), global::Developer.BankTx.Parser, new[]{ "Id", "BankId", "TxType", "AppId", "AppUserId", "CoinType", "Amount", "MainNet", "TradeAt", "SessionId", "CurrencyId", "Decimals", "TxStatus", "CryptoType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Developer.BankAddress), global::Developer.BankAddress.Parser, new[]{ "Id", "Address", "Owner", "PrivateKey", "MainNet", "CryptoType" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Developer : pb::IMessage<Developer> {
    private static readonly pb::MessageParser<Developer> _parser = new pb::MessageParser<Developer>(() => new Developer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Developer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Developer.DeveloperReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Developer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Developer(Developer other) : this() {
      id_ = other.id_;
      userId_ = other.userId_;
      mobile_ = other.mobile_;
      email_ = other.email_;
      idCardNumber_ = other.idCardNumber_;
      realName_ = other.realName_;
      privateKey_ = other.privateKey_;
      publicKey_ = other.publicKey_;
      accessKey_ = other.accessKey_;
      createAt_ = other.createAt_;
      updateAt_ = other.updateAt_;
      active_ = other.active_;
      verified_ = other.verified_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Developer Clone() {
      return new Developer(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 2;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mobile" field.</summary>
    public const int MobileFieldNumber = 3;
    private string mobile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mobile {
      get { return mobile_; }
      set {
        mobile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 4;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id_card_number" field.</summary>
    public const int IdCardNumberFieldNumber = 5;
    private string idCardNumber_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IdCardNumber {
      get { return idCardNumber_; }
      set {
        idCardNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "real_name" field.</summary>
    public const int RealNameFieldNumber = 6;
    private string realName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RealName {
      get { return realName_; }
      set {
        realName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "private_key" field.</summary>
    public const int PrivateKeyFieldNumber = 7;
    private string privateKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrivateKey {
      get { return privateKey_; }
      set {
        privateKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "public_key" field.</summary>
    public const int PublicKeyFieldNumber = 8;
    private string publicKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "access_key" field.</summary>
    public const int AccessKeyFieldNumber = 9;
    private string accessKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessKey {
      get { return accessKey_; }
      set {
        accessKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_at" field.</summary>
    public const int CreateAtFieldNumber = 10;
    private ulong createAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CreateAt {
      get { return createAt_; }
      set {
        createAt_ = value;
      }
    }

    /// <summary>Field number for the "update_at" field.</summary>
    public const int UpdateAtFieldNumber = 11;
    private ulong updateAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UpdateAt {
      get { return updateAt_; }
      set {
        updateAt_ = value;
      }
    }

    /// <summary>Field number for the "active" field.</summary>
    public const int ActiveFieldNumber = 12;
    private bool active_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    /// <summary>Field number for the "verified" field.</summary>
    public const int VerifiedFieldNumber = 13;
    private bool verified_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Verified {
      get { return verified_; }
      set {
        verified_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Developer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Developer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (UserId != other.UserId) return false;
      if (Mobile != other.Mobile) return false;
      if (Email != other.Email) return false;
      if (IdCardNumber != other.IdCardNumber) return false;
      if (RealName != other.RealName) return false;
      if (PrivateKey != other.PrivateKey) return false;
      if (PublicKey != other.PublicKey) return false;
      if (AccessKey != other.AccessKey) return false;
      if (CreateAt != other.CreateAt) return false;
      if (UpdateAt != other.UpdateAt) return false;
      if (Active != other.Active) return false;
      if (Verified != other.Verified) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (Mobile.Length != 0) hash ^= Mobile.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (IdCardNumber.Length != 0) hash ^= IdCardNumber.GetHashCode();
      if (RealName.Length != 0) hash ^= RealName.GetHashCode();
      if (PrivateKey.Length != 0) hash ^= PrivateKey.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (AccessKey.Length != 0) hash ^= AccessKey.GetHashCode();
      if (CreateAt != 0UL) hash ^= CreateAt.GetHashCode();
      if (UpdateAt != 0UL) hash ^= UpdateAt.GetHashCode();
      if (Active != false) hash ^= Active.GetHashCode();
      if (Verified != false) hash ^= Verified.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserId);
      }
      if (Mobile.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Mobile);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Email);
      }
      if (IdCardNumber.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(IdCardNumber);
      }
      if (RealName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(RealName);
      }
      if (PrivateKey.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PrivateKey);
      }
      if (PublicKey.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PublicKey);
      }
      if (AccessKey.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(AccessKey);
      }
      if (CreateAt != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(CreateAt);
      }
      if (UpdateAt != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(UpdateAt);
      }
      if (Active != false) {
        output.WriteRawTag(96);
        output.WriteBool(Active);
      }
      if (Verified != false) {
        output.WriteRawTag(104);
        output.WriteBool(Verified);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (Mobile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mobile);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (IdCardNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IdCardNumber);
      }
      if (RealName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RealName);
      }
      if (PrivateKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrivateKey);
      }
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PublicKey);
      }
      if (AccessKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessKey);
      }
      if (CreateAt != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CreateAt);
      }
      if (UpdateAt != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UpdateAt);
      }
      if (Active != false) {
        size += 1 + 1;
      }
      if (Verified != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Developer other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.Mobile.Length != 0) {
        Mobile = other.Mobile;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.IdCardNumber.Length != 0) {
        IdCardNumber = other.IdCardNumber;
      }
      if (other.RealName.Length != 0) {
        RealName = other.RealName;
      }
      if (other.PrivateKey.Length != 0) {
        PrivateKey = other.PrivateKey;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      if (other.AccessKey.Length != 0) {
        AccessKey = other.AccessKey;
      }
      if (other.CreateAt != 0UL) {
        CreateAt = other.CreateAt;
      }
      if (other.UpdateAt != 0UL) {
        UpdateAt = other.UpdateAt;
      }
      if (other.Active != false) {
        Active = other.Active;
      }
      if (other.Verified != false) {
        Verified = other.Verified;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            UserId = input.ReadString();
            break;
          }
          case 26: {
            Mobile = input.ReadString();
            break;
          }
          case 34: {
            Email = input.ReadString();
            break;
          }
          case 42: {
            IdCardNumber = input.ReadString();
            break;
          }
          case 50: {
            RealName = input.ReadString();
            break;
          }
          case 58: {
            PrivateKey = input.ReadString();
            break;
          }
          case 66: {
            PublicKey = input.ReadString();
            break;
          }
          case 74: {
            AccessKey = input.ReadString();
            break;
          }
          case 80: {
            CreateAt = input.ReadUInt64();
            break;
          }
          case 88: {
            UpdateAt = input.ReadUInt64();
            break;
          }
          case 96: {
            Active = input.ReadBool();
            break;
          }
          case 104: {
            Verified = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Session : pb::IMessage<Session> {
    private static readonly pb::MessageParser<Session> _parser = new pb::MessageParser<Session>(() => new Session());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Session> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Developer.DeveloperReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Session() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Session(Session other) : this() {
      sessionId_ = other.sessionId_;
      developerId_ = other.developerId_;
      secretKey_ = other.secretKey_;
      appId_ = other.appId_;
      cryptoType_ = other.cryptoType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Session Clone() {
      return new Session(this);
    }

    /// <summary>Field number for the "session_id" field.</summary>
    public const int SessionIdFieldNumber = 1;
    private string sessionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "developer_id" field.</summary>
    public const int DeveloperIdFieldNumber = 2;
    private string developerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeveloperId {
      get { return developerId_; }
      set {
        developerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "secret_key" field.</summary>
    public const int SecretKeyFieldNumber = 3;
    private string secretKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SecretKey {
      get { return secretKey_; }
      set {
        secretKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "app_id" field.</summary>
    public const int AppIdFieldNumber = 4;
    private string appId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppId {
      get { return appId_; }
      set {
        appId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "crypto_type" field.</summary>
    public const int CryptoTypeFieldNumber = 5;
    private string cryptoType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CryptoType {
      get { return cryptoType_; }
      set {
        cryptoType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Session);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Session other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionId != other.SessionId) return false;
      if (DeveloperId != other.DeveloperId) return false;
      if (SecretKey != other.SecretKey) return false;
      if (AppId != other.AppId) return false;
      if (CryptoType != other.CryptoType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
      if (DeveloperId.Length != 0) hash ^= DeveloperId.GetHashCode();
      if (SecretKey.Length != 0) hash ^= SecretKey.GetHashCode();
      if (AppId.Length != 0) hash ^= AppId.GetHashCode();
      if (CryptoType.Length != 0) hash ^= CryptoType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SessionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SessionId);
      }
      if (DeveloperId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeveloperId);
      }
      if (SecretKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SecretKey);
      }
      if (AppId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AppId);
      }
      if (CryptoType.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CryptoType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
      }
      if (DeveloperId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeveloperId);
      }
      if (SecretKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SecretKey);
      }
      if (AppId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppId);
      }
      if (CryptoType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CryptoType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Session other) {
      if (other == null) {
        return;
      }
      if (other.SessionId.Length != 0) {
        SessionId = other.SessionId;
      }
      if (other.DeveloperId.Length != 0) {
        DeveloperId = other.DeveloperId;
      }
      if (other.SecretKey.Length != 0) {
        SecretKey = other.SecretKey;
      }
      if (other.AppId.Length != 0) {
        AppId = other.AppId;
      }
      if (other.CryptoType.Length != 0) {
        CryptoType = other.CryptoType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SessionId = input.ReadString();
            break;
          }
          case 18: {
            DeveloperId = input.ReadString();
            break;
          }
          case 26: {
            SecretKey = input.ReadString();
            break;
          }
          case 34: {
            AppId = input.ReadString();
            break;
          }
          case 42: {
            CryptoType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SessionRequest : pb::IMessage<SessionRequest> {
    private static readonly pb::MessageParser<SessionRequest> _parser = new pb::MessageParser<SessionRequest>(() => new SessionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SessionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Developer.DeveloperReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionRequest(SessionRequest other) : this() {
      accessKey_ = other.accessKey_;
      cryptoType_ = other.cryptoType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionRequest Clone() {
      return new SessionRequest(this);
    }

    /// <summary>Field number for the "access_key" field.</summary>
    public const int AccessKeyFieldNumber = 1;
    private string accessKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessKey {
      get { return accessKey_; }
      set {
        accessKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "crypto_type" field.</summary>
    public const int CryptoTypeFieldNumber = 2;
    private string cryptoType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CryptoType {
      get { return cryptoType_; }
      set {
        cryptoType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SessionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SessionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccessKey != other.AccessKey) return false;
      if (CryptoType != other.CryptoType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccessKey.Length != 0) hash ^= AccessKey.GetHashCode();
      if (CryptoType.Length != 0) hash ^= CryptoType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccessKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccessKey);
      }
      if (CryptoType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CryptoType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccessKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessKey);
      }
      if (CryptoType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CryptoType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SessionRequest other) {
      if (other == null) {
        return;
      }
      if (other.AccessKey.Length != 0) {
        AccessKey = other.AccessKey;
      }
      if (other.CryptoType.Length != 0) {
        CryptoType = other.CryptoType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AccessKey = input.ReadString();
            break;
          }
          case 18: {
            CryptoType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AppBank : pb::IMessage<AppBank> {
    private static readonly pb::MessageParser<AppBank> _parser = new pb::MessageParser<AppBank>(() => new AppBank());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AppBank> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Developer.DeveloperReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppBank() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppBank(AppBank other) : this() {
      id_ = other.id_;
      developerId_ = other.developerId_;
      cryptoType_ = other.cryptoType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppBank Clone() {
      return new AppBank(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "developer_id" field.</summary>
    public const int DeveloperIdFieldNumber = 2;
    private string developerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeveloperId {
      get { return developerId_; }
      set {
        developerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "crypto_type" field.</summary>
    public const int CryptoTypeFieldNumber = 3;
    private string cryptoType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CryptoType {
      get { return cryptoType_; }
      set {
        cryptoType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AppBank);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AppBank other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (DeveloperId != other.DeveloperId) return false;
      if (CryptoType != other.CryptoType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (DeveloperId.Length != 0) hash ^= DeveloperId.GetHashCode();
      if (CryptoType.Length != 0) hash ^= CryptoType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (DeveloperId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeveloperId);
      }
      if (CryptoType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CryptoType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (DeveloperId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeveloperId);
      }
      if (CryptoType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CryptoType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AppBank other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.DeveloperId.Length != 0) {
        DeveloperId = other.DeveloperId;
      }
      if (other.CryptoType.Length != 0) {
        CryptoType = other.CryptoType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            DeveloperId = input.ReadString();
            break;
          }
          case 26: {
            CryptoType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AppBankCurrency : pb::IMessage<AppBankCurrency> {
    private static readonly pb::MessageParser<AppBankCurrency> _parser = new pb::MessageParser<AppBankCurrency>(() => new AppBankCurrency());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AppBankCurrency> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Developer.DeveloperReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppBankCurrency() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppBankCurrency(AppBankCurrency other) : this() {
      id_ = other.id_;
      bankId_ = other.bankId_;
      coinType_ = other.coinType_;
      balance_ = other.balance_;
      mainNet_ = other.mainNet_;
      gasRate_ = other.gasRate_;
      gas_ = other.gas_;
      addressBalance_ = other.addressBalance_;
      address_ = other.address_;
      decimals_ = other.decimals_;
      cryptoType_ = other.cryptoType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppBankCurrency Clone() {
      return new AppBankCurrency(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bank_id" field.</summary>
    public const int BankIdFieldNumber = 2;
    private string bankId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BankId {
      get { return bankId_; }
      set {
        bankId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "coin_type" field.</summary>
    public const int CoinTypeFieldNumber = 3;
    private string coinType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CoinType {
      get { return coinType_; }
      set {
        coinType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "balance" field.</summary>
    public const int BalanceFieldNumber = 4;
    private string balance_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Balance {
      get { return balance_; }
      set {
        balance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "main_net" field.</summary>
    public const int MainNetFieldNumber = 5;
    private string mainNet_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MainNet {
      get { return mainNet_; }
      set {
        mainNet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gas_rate" field.</summary>
    public const int GasRateFieldNumber = 6;
    private double gasRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GasRate {
      get { return gasRate_; }
      set {
        gasRate_ = value;
      }
    }

    /// <summary>Field number for the "gas" field.</summary>
    public const int GasFieldNumber = 7;
    private uint gas_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Gas {
      get { return gas_; }
      set {
        gas_ = value;
      }
    }

    /// <summary>Field number for the "address_balance" field.</summary>
    public const int AddressBalanceFieldNumber = 8;
    private string addressBalance_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AddressBalance {
      get { return addressBalance_; }
      set {
        addressBalance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 9;
    private string address_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "decimals" field.</summary>
    public const int DecimalsFieldNumber = 10;
    private uint decimals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Decimals {
      get { return decimals_; }
      set {
        decimals_ = value;
      }
    }

    /// <summary>Field number for the "crypto_type" field.</summary>
    public const int CryptoTypeFieldNumber = 11;
    private string cryptoType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CryptoType {
      get { return cryptoType_; }
      set {
        cryptoType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AppBankCurrency);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AppBankCurrency other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (BankId != other.BankId) return false;
      if (CoinType != other.CoinType) return false;
      if (Balance != other.Balance) return false;
      if (MainNet != other.MainNet) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GasRate, other.GasRate)) return false;
      if (Gas != other.Gas) return false;
      if (AddressBalance != other.AddressBalance) return false;
      if (Address != other.Address) return false;
      if (Decimals != other.Decimals) return false;
      if (CryptoType != other.CryptoType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (BankId.Length != 0) hash ^= BankId.GetHashCode();
      if (CoinType.Length != 0) hash ^= CoinType.GetHashCode();
      if (Balance.Length != 0) hash ^= Balance.GetHashCode();
      if (MainNet.Length != 0) hash ^= MainNet.GetHashCode();
      if (GasRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GasRate);
      if (Gas != 0) hash ^= Gas.GetHashCode();
      if (AddressBalance.Length != 0) hash ^= AddressBalance.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (Decimals != 0) hash ^= Decimals.GetHashCode();
      if (CryptoType.Length != 0) hash ^= CryptoType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (BankId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BankId);
      }
      if (CoinType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CoinType);
      }
      if (Balance.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Balance);
      }
      if (MainNet.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(MainNet);
      }
      if (GasRate != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(GasRate);
      }
      if (Gas != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Gas);
      }
      if (AddressBalance.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(AddressBalance);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Address);
      }
      if (Decimals != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Decimals);
      }
      if (CryptoType.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(CryptoType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (BankId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BankId);
      }
      if (CoinType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CoinType);
      }
      if (Balance.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Balance);
      }
      if (MainNet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MainNet);
      }
      if (GasRate != 0D) {
        size += 1 + 8;
      }
      if (Gas != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Gas);
      }
      if (AddressBalance.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AddressBalance);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Decimals != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Decimals);
      }
      if (CryptoType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CryptoType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AppBankCurrency other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.BankId.Length != 0) {
        BankId = other.BankId;
      }
      if (other.CoinType.Length != 0) {
        CoinType = other.CoinType;
      }
      if (other.Balance.Length != 0) {
        Balance = other.Balance;
      }
      if (other.MainNet.Length != 0) {
        MainNet = other.MainNet;
      }
      if (other.GasRate != 0D) {
        GasRate = other.GasRate;
      }
      if (other.Gas != 0) {
        Gas = other.Gas;
      }
      if (other.AddressBalance.Length != 0) {
        AddressBalance = other.AddressBalance;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.Decimals != 0) {
        Decimals = other.Decimals;
      }
      if (other.CryptoType.Length != 0) {
        CryptoType = other.CryptoType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            BankId = input.ReadString();
            break;
          }
          case 26: {
            CoinType = input.ReadString();
            break;
          }
          case 34: {
            Balance = input.ReadString();
            break;
          }
          case 42: {
            MainNet = input.ReadString();
            break;
          }
          case 49: {
            GasRate = input.ReadDouble();
            break;
          }
          case 56: {
            Gas = input.ReadUInt32();
            break;
          }
          case 66: {
            AddressBalance = input.ReadString();
            break;
          }
          case 74: {
            Address = input.ReadString();
            break;
          }
          case 80: {
            Decimals = input.ReadUInt32();
            break;
          }
          case 90: {
            CryptoType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AllocateGas : pb::IMessage<AllocateGas> {
    private static readonly pb::MessageParser<AllocateGas> _parser = new pb::MessageParser<AllocateGas>(() => new AllocateGas());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllocateGas> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Developer.DeveloperReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllocateGas() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllocateGas(AllocateGas other) : this() {
      id_ = other.id_;
      mainNet_ = other.mainNet_;
      gasType_ = other.gasType_;
      decimal_ = other.decimal_;
      sessionId_ = other.sessionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllocateGas Clone() {
      return new AllocateGas(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "main_net" field.</summary>
    public const int MainNetFieldNumber = 2;
    private string mainNet_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MainNet {
      get { return mainNet_; }
      set {
        mainNet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gas_type" field.</summary>
    public const int GasTypeFieldNumber = 3;
    private string gasType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GasType {
      get { return gasType_; }
      set {
        gasType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "decimal" field.</summary>
    public const int DecimalFieldNumber = 4;
    private uint decimal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Decimal {
      get { return decimal_; }
      set {
        decimal_ = value;
      }
    }

    /// <summary>Field number for the "session_id" field.</summary>
    public const int SessionIdFieldNumber = 5;
    private string sessionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllocateGas);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllocateGas other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (MainNet != other.MainNet) return false;
      if (GasType != other.GasType) return false;
      if (Decimal != other.Decimal) return false;
      if (SessionId != other.SessionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (MainNet.Length != 0) hash ^= MainNet.GetHashCode();
      if (GasType.Length != 0) hash ^= GasType.GetHashCode();
      if (Decimal != 0) hash ^= Decimal.GetHashCode();
      if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (MainNet.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MainNet);
      }
      if (GasType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GasType);
      }
      if (Decimal != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Decimal);
      }
      if (SessionId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SessionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (MainNet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MainNet);
      }
      if (GasType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GasType);
      }
      if (Decimal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Decimal);
      }
      if (SessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllocateGas other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.MainNet.Length != 0) {
        MainNet = other.MainNet;
      }
      if (other.GasType.Length != 0) {
        GasType = other.GasType;
      }
      if (other.Decimal != 0) {
        Decimal = other.Decimal;
      }
      if (other.SessionId.Length != 0) {
        SessionId = other.SessionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            MainNet = input.ReadString();
            break;
          }
          case 26: {
            GasType = input.ReadString();
            break;
          }
          case 32: {
            Decimal = input.ReadUInt32();
            break;
          }
          case 42: {
            SessionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnAllocateGas : pb::IMessage<UnAllocateGas> {
    private static readonly pb::MessageParser<UnAllocateGas> _parser = new pb::MessageParser<UnAllocateGas>(() => new UnAllocateGas());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnAllocateGas> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Developer.DeveloperReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnAllocateGas() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnAllocateGas(UnAllocateGas other) : this() {
      id_ = other.id_;
      mainNet_ = other.mainNet_;
      gasType_ = other.gasType_;
      decimal_ = other.decimal_;
      sessionId_ = other.sessionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnAllocateGas Clone() {
      return new UnAllocateGas(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "main_net" field.</summary>
    public const int MainNetFieldNumber = 2;
    private string mainNet_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MainNet {
      get { return mainNet_; }
      set {
        mainNet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gas_type" field.</summary>
    public const int GasTypeFieldNumber = 3;
    private string gasType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GasType {
      get { return gasType_; }
      set {
        gasType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "decimal" field.</summary>
    public const int DecimalFieldNumber = 4;
    private uint decimal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Decimal {
      get { return decimal_; }
      set {
        decimal_ = value;
      }
    }

    /// <summary>Field number for the "session_id" field.</summary>
    public const int SessionIdFieldNumber = 5;
    private string sessionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnAllocateGas);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnAllocateGas other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (MainNet != other.MainNet) return false;
      if (GasType != other.GasType) return false;
      if (Decimal != other.Decimal) return false;
      if (SessionId != other.SessionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (MainNet.Length != 0) hash ^= MainNet.GetHashCode();
      if (GasType.Length != 0) hash ^= GasType.GetHashCode();
      if (Decimal != 0) hash ^= Decimal.GetHashCode();
      if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (MainNet.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MainNet);
      }
      if (GasType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GasType);
      }
      if (Decimal != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Decimal);
      }
      if (SessionId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SessionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (MainNet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MainNet);
      }
      if (GasType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GasType);
      }
      if (Decimal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Decimal);
      }
      if (SessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnAllocateGas other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.MainNet.Length != 0) {
        MainNet = other.MainNet;
      }
      if (other.GasType.Length != 0) {
        GasType = other.GasType;
      }
      if (other.Decimal != 0) {
        Decimal = other.Decimal;
      }
      if (other.SessionId.Length != 0) {
        SessionId = other.SessionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            MainNet = input.ReadString();
            break;
          }
          case 26: {
            GasType = input.ReadString();
            break;
          }
          case 32: {
            Decimal = input.ReadUInt32();
            break;
          }
          case 42: {
            SessionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AppBankBalance : pb::IMessage<AppBankBalance> {
    private static readonly pb::MessageParser<AppBankBalance> _parser = new pb::MessageParser<AppBankBalance>(() => new AppBankBalance());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AppBankBalance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Developer.DeveloperReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppBankBalance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppBankBalance(AppBankBalance other) : this() {
      bankCurrencies_ = other.bankCurrencies_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppBankBalance Clone() {
      return new AppBankBalance(this);
    }

    /// <summary>Field number for the "bank_currencies" field.</summary>
    public const int BankCurrenciesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Developer.AppBankCurrency> _repeated_bankCurrencies_codec
        = pb::FieldCodec.ForMessage(10, global::Developer.AppBankCurrency.Parser);
    private readonly pbc::RepeatedField<global::Developer.AppBankCurrency> bankCurrencies_ = new pbc::RepeatedField<global::Developer.AppBankCurrency>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Developer.AppBankCurrency> BankCurrencies {
      get { return bankCurrencies_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AppBankBalance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AppBankBalance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!bankCurrencies_.Equals(other.bankCurrencies_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= bankCurrencies_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      bankCurrencies_.WriteTo(output, _repeated_bankCurrencies_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += bankCurrencies_.CalculateSize(_repeated_bankCurrencies_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AppBankBalance other) {
      if (other == null) {
        return;
      }
      bankCurrencies_.Add(other.bankCurrencies_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            bankCurrencies_.AddEntriesFrom(input, _repeated_bankCurrencies_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BankTx : pb::IMessage<BankTx> {
    private static readonly pb::MessageParser<BankTx> _parser = new pb::MessageParser<BankTx>(() => new BankTx());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BankTx> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Developer.DeveloperReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BankTx() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BankTx(BankTx other) : this() {
      id_ = other.id_;
      bankId_ = other.bankId_;
      txType_ = other.txType_;
      appId_ = other.appId_;
      appUserId_ = other.appUserId_;
      coinType_ = other.coinType_;
      amount_ = other.amount_;
      mainNet_ = other.mainNet_;
      tradeAt_ = other.tradeAt_;
      sessionId_ = other.sessionId_;
      currencyId_ = other.currencyId_;
      decimals_ = other.decimals_;
      txStatus_ = other.txStatus_;
      cryptoType_ = other.cryptoType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BankTx Clone() {
      return new BankTx(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bank_id" field.</summary>
    public const int BankIdFieldNumber = 2;
    private string bankId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BankId {
      get { return bankId_; }
      set {
        bankId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tx_type" field.</summary>
    public const int TxTypeFieldNumber = 3;
    private string txType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TxType {
      get { return txType_; }
      set {
        txType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "app_id" field.</summary>
    public const int AppIdFieldNumber = 4;
    private string appId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppId {
      get { return appId_; }
      set {
        appId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "app_user_id" field.</summary>
    public const int AppUserIdFieldNumber = 5;
    private string appUserId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppUserId {
      get { return appUserId_; }
      set {
        appUserId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "coin_type" field.</summary>
    public const int CoinTypeFieldNumber = 6;
    private string coinType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CoinType {
      get { return coinType_; }
      set {
        coinType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 7;
    private string amount_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Amount {
      get { return amount_; }
      set {
        amount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "main_net" field.</summary>
    public const int MainNetFieldNumber = 8;
    private string mainNet_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MainNet {
      get { return mainNet_; }
      set {
        mainNet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trade_at" field.</summary>
    public const int TradeAtFieldNumber = 9;
    private ulong tradeAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TradeAt {
      get { return tradeAt_; }
      set {
        tradeAt_ = value;
      }
    }

    /// <summary>Field number for the "session_id" field.</summary>
    public const int SessionIdFieldNumber = 10;
    private string sessionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currency_id" field.</summary>
    public const int CurrencyIdFieldNumber = 11;
    private string currencyId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrencyId {
      get { return currencyId_; }
      set {
        currencyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "decimals" field.</summary>
    public const int DecimalsFieldNumber = 12;
    private uint decimals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Decimals {
      get { return decimals_; }
      set {
        decimals_ = value;
      }
    }

    /// <summary>Field number for the "tx_status" field.</summary>
    public const int TxStatusFieldNumber = 13;
    private uint txStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TxStatus {
      get { return txStatus_; }
      set {
        txStatus_ = value;
      }
    }

    /// <summary>Field number for the "crypto_type" field.</summary>
    public const int CryptoTypeFieldNumber = 14;
    private string cryptoType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CryptoType {
      get { return cryptoType_; }
      set {
        cryptoType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BankTx);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BankTx other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (BankId != other.BankId) return false;
      if (TxType != other.TxType) return false;
      if (AppId != other.AppId) return false;
      if (AppUserId != other.AppUserId) return false;
      if (CoinType != other.CoinType) return false;
      if (Amount != other.Amount) return false;
      if (MainNet != other.MainNet) return false;
      if (TradeAt != other.TradeAt) return false;
      if (SessionId != other.SessionId) return false;
      if (CurrencyId != other.CurrencyId) return false;
      if (Decimals != other.Decimals) return false;
      if (TxStatus != other.TxStatus) return false;
      if (CryptoType != other.CryptoType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (BankId.Length != 0) hash ^= BankId.GetHashCode();
      if (TxType.Length != 0) hash ^= TxType.GetHashCode();
      if (AppId.Length != 0) hash ^= AppId.GetHashCode();
      if (AppUserId.Length != 0) hash ^= AppUserId.GetHashCode();
      if (CoinType.Length != 0) hash ^= CoinType.GetHashCode();
      if (Amount.Length != 0) hash ^= Amount.GetHashCode();
      if (MainNet.Length != 0) hash ^= MainNet.GetHashCode();
      if (TradeAt != 0UL) hash ^= TradeAt.GetHashCode();
      if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
      if (CurrencyId.Length != 0) hash ^= CurrencyId.GetHashCode();
      if (Decimals != 0) hash ^= Decimals.GetHashCode();
      if (TxStatus != 0) hash ^= TxStatus.GetHashCode();
      if (CryptoType.Length != 0) hash ^= CryptoType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (BankId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BankId);
      }
      if (TxType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TxType);
      }
      if (AppId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AppId);
      }
      if (AppUserId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AppUserId);
      }
      if (CoinType.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CoinType);
      }
      if (Amount.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Amount);
      }
      if (MainNet.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(MainNet);
      }
      if (TradeAt != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(TradeAt);
      }
      if (SessionId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(SessionId);
      }
      if (CurrencyId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(CurrencyId);
      }
      if (Decimals != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(Decimals);
      }
      if (TxStatus != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(TxStatus);
      }
      if (CryptoType.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(CryptoType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (BankId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BankId);
      }
      if (TxType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TxType);
      }
      if (AppId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppId);
      }
      if (AppUserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppUserId);
      }
      if (CoinType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CoinType);
      }
      if (Amount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Amount);
      }
      if (MainNet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MainNet);
      }
      if (TradeAt != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TradeAt);
      }
      if (SessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
      }
      if (CurrencyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrencyId);
      }
      if (Decimals != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Decimals);
      }
      if (TxStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TxStatus);
      }
      if (CryptoType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CryptoType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BankTx other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.BankId.Length != 0) {
        BankId = other.BankId;
      }
      if (other.TxType.Length != 0) {
        TxType = other.TxType;
      }
      if (other.AppId.Length != 0) {
        AppId = other.AppId;
      }
      if (other.AppUserId.Length != 0) {
        AppUserId = other.AppUserId;
      }
      if (other.CoinType.Length != 0) {
        CoinType = other.CoinType;
      }
      if (other.Amount.Length != 0) {
        Amount = other.Amount;
      }
      if (other.MainNet.Length != 0) {
        MainNet = other.MainNet;
      }
      if (other.TradeAt != 0UL) {
        TradeAt = other.TradeAt;
      }
      if (other.SessionId.Length != 0) {
        SessionId = other.SessionId;
      }
      if (other.CurrencyId.Length != 0) {
        CurrencyId = other.CurrencyId;
      }
      if (other.Decimals != 0) {
        Decimals = other.Decimals;
      }
      if (other.TxStatus != 0) {
        TxStatus = other.TxStatus;
      }
      if (other.CryptoType.Length != 0) {
        CryptoType = other.CryptoType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            BankId = input.ReadString();
            break;
          }
          case 26: {
            TxType = input.ReadString();
            break;
          }
          case 34: {
            AppId = input.ReadString();
            break;
          }
          case 42: {
            AppUserId = input.ReadString();
            break;
          }
          case 50: {
            CoinType = input.ReadString();
            break;
          }
          case 58: {
            Amount = input.ReadString();
            break;
          }
          case 66: {
            MainNet = input.ReadString();
            break;
          }
          case 72: {
            TradeAt = input.ReadUInt64();
            break;
          }
          case 82: {
            SessionId = input.ReadString();
            break;
          }
          case 90: {
            CurrencyId = input.ReadString();
            break;
          }
          case 96: {
            Decimals = input.ReadUInt32();
            break;
          }
          case 104: {
            TxStatus = input.ReadUInt32();
            break;
          }
          case 114: {
            CryptoType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BankAddress : pb::IMessage<BankAddress> {
    private static readonly pb::MessageParser<BankAddress> _parser = new pb::MessageParser<BankAddress>(() => new BankAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BankAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Developer.DeveloperReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BankAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BankAddress(BankAddress other) : this() {
      id_ = other.id_;
      address_ = other.address_;
      owner_ = other.owner_;
      privateKey_ = other.privateKey_;
      mainNet_ = other.mainNet_;
      cryptoType_ = other.cryptoType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BankAddress Clone() {
      return new BankAddress(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 2;
    private string address_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 3;
    private string owner_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Owner {
      get { return owner_; }
      set {
        owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "private_key" field.</summary>
    public const int PrivateKeyFieldNumber = 4;
    private string privateKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrivateKey {
      get { return privateKey_; }
      set {
        privateKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "main_net" field.</summary>
    public const int MainNetFieldNumber = 5;
    private string mainNet_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MainNet {
      get { return mainNet_; }
      set {
        mainNet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "crypto_type" field.</summary>
    public const int CryptoTypeFieldNumber = 6;
    private string cryptoType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CryptoType {
      get { return cryptoType_; }
      set {
        cryptoType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BankAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BankAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Address != other.Address) return false;
      if (Owner != other.Owner) return false;
      if (PrivateKey != other.PrivateKey) return false;
      if (MainNet != other.MainNet) return false;
      if (CryptoType != other.CryptoType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (Owner.Length != 0) hash ^= Owner.GetHashCode();
      if (PrivateKey.Length != 0) hash ^= PrivateKey.GetHashCode();
      if (MainNet.Length != 0) hash ^= MainNet.GetHashCode();
      if (CryptoType.Length != 0) hash ^= CryptoType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Address);
      }
      if (Owner.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Owner);
      }
      if (PrivateKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PrivateKey);
      }
      if (MainNet.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(MainNet);
      }
      if (CryptoType.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CryptoType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Owner.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
      }
      if (PrivateKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrivateKey);
      }
      if (MainNet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MainNet);
      }
      if (CryptoType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CryptoType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BankAddress other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.Owner.Length != 0) {
        Owner = other.Owner;
      }
      if (other.PrivateKey.Length != 0) {
        PrivateKey = other.PrivateKey;
      }
      if (other.MainNet.Length != 0) {
        MainNet = other.MainNet;
      }
      if (other.CryptoType.Length != 0) {
        CryptoType = other.CryptoType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Address = input.ReadString();
            break;
          }
          case 26: {
            Owner = input.ReadString();
            break;
          }
          case 34: {
            PrivateKey = input.ReadString();
            break;
          }
          case 42: {
            MainNet = input.ReadString();
            break;
          }
          case 50: {
            CryptoType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
