// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tsv.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Tsv {
  public static partial class TSVService
  {
    static readonly string __ServiceName = "tsv.TSVService";

    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::VersionInfo> __Marshaller_VersionInfo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::VersionInfo.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tsv.QRRequest> __Marshaller_tsv_QRRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tsv.QRRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tsv.Provider> __Marshaller_tsv_Provider = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tsv.Provider.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tsv.KeyRequest> __Marshaller_tsv_KeyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tsv.KeyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tsv.KeyResponse> __Marshaller_tsv_KeyResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tsv.KeyResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tsv.BindKeyRequest> __Marshaller_tsv_BindKeyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tsv.BindKeyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tsv.TwoStepVerifyStauts> __Marshaller_tsv_TwoStepVerifyStauts = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tsv.TwoStepVerifyStauts.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tsv.VerifyCodeRequest> __Marshaller_tsv_VerifyCodeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tsv.VerifyCodeRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::VersionInfo> __Method_versionInfo = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::VersionInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "versionInfo",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_VersionInfo);

    static readonly grpc::Method<global::Tsv.QRRequest, global::Tsv.Provider> __Method_getProvider = new grpc::Method<global::Tsv.QRRequest, global::Tsv.Provider>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getProvider",
        __Marshaller_tsv_QRRequest,
        __Marshaller_tsv_Provider);

    static readonly grpc::Method<global::Tsv.KeyRequest, global::Tsv.KeyResponse> __Method_generateKey = new grpc::Method<global::Tsv.KeyRequest, global::Tsv.KeyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "generateKey",
        __Marshaller_tsv_KeyRequest,
        __Marshaller_tsv_KeyResponse);

    static readonly grpc::Method<global::Tsv.BindKeyRequest, global::Tsv.TwoStepVerifyStauts> __Method_bindKey = new grpc::Method<global::Tsv.BindKeyRequest, global::Tsv.TwoStepVerifyStauts>(
        grpc::MethodType.Unary,
        __ServiceName,
        "bindKey",
        __Marshaller_tsv_BindKeyRequest,
        __Marshaller_tsv_TwoStepVerifyStauts);

    static readonly grpc::Method<global::Tsv.VerifyCodeRequest, global::Tsv.TwoStepVerifyStauts> __Method_verifyCode = new grpc::Method<global::Tsv.VerifyCodeRequest, global::Tsv.TwoStepVerifyStauts>(
        grpc::MethodType.Unary,
        __ServiceName,
        "verifyCode",
        __Marshaller_tsv_VerifyCodeRequest,
        __Marshaller_tsv_TwoStepVerifyStauts);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Tsv.TsvReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of TSVService</summary>
    public abstract partial class TSVServiceBase
    {
      /// <summary>
      /// service version
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::VersionInfo> versionInfo(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      /// get provider from provider name
      /// 
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Tsv.Provider> getProvider(global::Tsv.QRRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      /// when provider's key store is akey open platform, provider can generate and bind key , user and device.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Tsv.KeyResponse> generateKey(global::Tsv.KeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      /// bind key
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Tsv.TwoStepVerifyStauts> bindKey(global::Tsv.BindKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      ///verify code, when code resource is akey open platform
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Tsv.TwoStepVerifyStauts> verifyCode(global::Tsv.VerifyCodeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TSVService</summary>
    public partial class TSVServiceClient : grpc::ClientBase<TSVServiceClient>
    {
      /// <summary>Creates a new client for TSVService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TSVServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TSVService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TSVServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TSVServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TSVServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// service version
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::VersionInfo versionInfo(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return versionInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// service version
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::VersionInfo versionInfo(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_versionInfo, null, options, request);
      }
      /// <summary>
      /// service version
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::VersionInfo> versionInfoAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return versionInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// service version
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::VersionInfo> versionInfoAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_versionInfo, null, options, request);
      }
      /// <summary>
      ///
      /// get provider from provider name
      /// 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tsv.Provider getProvider(global::Tsv.QRRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getProvider(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// get provider from provider name
      /// 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tsv.Provider getProvider(global::Tsv.QRRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getProvider, null, options, request);
      }
      /// <summary>
      ///
      /// get provider from provider name
      /// 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tsv.Provider> getProviderAsync(global::Tsv.QRRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getProviderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// get provider from provider name
      /// 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tsv.Provider> getProviderAsync(global::Tsv.QRRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getProvider, null, options, request);
      }
      /// <summary>
      ///
      /// when provider's key store is akey open platform, provider can generate and bind key , user and device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tsv.KeyResponse generateKey(global::Tsv.KeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return generateKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// when provider's key store is akey open platform, provider can generate and bind key , user and device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tsv.KeyResponse generateKey(global::Tsv.KeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_generateKey, null, options, request);
      }
      /// <summary>
      ///
      /// when provider's key store is akey open platform, provider can generate and bind key , user and device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tsv.KeyResponse> generateKeyAsync(global::Tsv.KeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return generateKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// when provider's key store is akey open platform, provider can generate and bind key , user and device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tsv.KeyResponse> generateKeyAsync(global::Tsv.KeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_generateKey, null, options, request);
      }
      /// <summary>
      ///
      /// bind key
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tsv.TwoStepVerifyStauts bindKey(global::Tsv.BindKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return bindKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// bind key
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tsv.TwoStepVerifyStauts bindKey(global::Tsv.BindKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_bindKey, null, options, request);
      }
      /// <summary>
      ///
      /// bind key
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tsv.TwoStepVerifyStauts> bindKeyAsync(global::Tsv.BindKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return bindKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// bind key
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tsv.TwoStepVerifyStauts> bindKeyAsync(global::Tsv.BindKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_bindKey, null, options, request);
      }
      /// <summary>
      ///
      ///verify code, when code resource is akey open platform
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tsv.TwoStepVerifyStauts verifyCode(global::Tsv.VerifyCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return verifyCode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      ///verify code, when code resource is akey open platform
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tsv.TwoStepVerifyStauts verifyCode(global::Tsv.VerifyCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_verifyCode, null, options, request);
      }
      /// <summary>
      ///
      ///verify code, when code resource is akey open platform
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tsv.TwoStepVerifyStauts> verifyCodeAsync(global::Tsv.VerifyCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return verifyCodeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      ///verify code, when code resource is akey open platform
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tsv.TwoStepVerifyStauts> verifyCodeAsync(global::Tsv.VerifyCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_verifyCode, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TSVServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TSVServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TSVServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_versionInfo, serviceImpl.versionInfo)
          .AddMethod(__Method_getProvider, serviceImpl.getProvider)
          .AddMethod(__Method_generateKey, serviceImpl.generateKey)
          .AddMethod(__Method_bindKey, serviceImpl.bindKey)
          .AddMethod(__Method_verifyCode, serviceImpl.verifyCode).Build();
    }

  }
}
#endregion
