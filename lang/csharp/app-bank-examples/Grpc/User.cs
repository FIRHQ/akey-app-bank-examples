// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: user.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace App.User {

  /// <summary>Holder for reflection information generated from user.proto</summary>
  public static partial class UserReflection {

    #region Descriptor
    /// <summary>File descriptor for user.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UserReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgp1c2VyLnByb3RvEghhcHAudXNlciKpAQoHQXBwVXNlchIKCgJpZBgBIAEo",
            "CRIOCgZhcHBfaWQYAiABKAkSEgoKc2Vzc2lvbl9pZBgDIAEoCRIaChJzZWNy",
            "ZXRfcHJpdmF0ZV9rZXkYBCABKAkSGQoRc2VjcmV0X3B1YmxpY19rZXkYBSAB",
            "KAkSDQoFbm9uY2UYBiABKAkSEwoLYXBwX3VzZXJfaWQYByABKAkSEwoLY3J5",
            "cHRvX3R5cGUYCCABKAkitQEKD0FwcFVzZXJDdXJyZW5jeRIKCgJpZBgBIAEo",
            "CRITCgtzeXNfdXNlcl9pZBgCIAEoCRIPCgdiYW5rX2lkGAMgASgJEhEKCWNv",
            "aW5fdHlwZRgEIAEoCRIQCghtYWluX25ldBgFIAEoCRIPCgdiYWxhbmNlGAYg",
            "ASgJEhcKD2FkZHJlc3NfYmFsYW5jZRgHIAEoCRIPCgdhZGRyZXNzGAggASgJ",
            "EhAKCGRlY2ltYWxzGAkgASgNIsICCglBcHBVc2VyVHgSCgoCaWQYASABKAkS",
            "DgoGYXBwX2lkGAIgASgJEhQKDGZyb21fdXNlcl9pZBgDIAEoCRISCgp0b191",
            "c2VyX2lkGAQgASgJEh0KFWZyb21fdXNlcl9jdXJyZW5jeV9pZBgFIAEoCRIO",
            "CgZhbW91bnQYBiABKAkSDwoHYmFua19pZBgHIAEoCRILCgNmZWUYCCABKAQS",
            "EQoJY29pbl90eXBlGAkgASgJEg8KB2FkZHJlc3MYCiABKAkSEAoIbWFpbl9u",
            "ZXQYCyABKAkSEAoIdHJhZGVfYXQYDCABKAQSEgoKc2Vzc2lvbl9pZBgNIAEo",
            "CRIQCghkZWNpbWFscxgOIAEoDRIRCgl0eF9zdGF0dXMYDyABKA0SDAoEY29k",
            "ZRgQIAEoCRITCgtjcnlwdG9fdHlwZRgRIAEoCSJrCg5BcHBVc2VyQmFsYW5j",
            "ZRITCgthcHBfdXNlcl9pZBgBIAEoCRIOCgZhcHBfaWQYAiABKAkSNAoRYXBw",
            "VXNlckN1cnJlbmNpZXMYAyADKAsyGS5hcHAudXNlci5BcHBVc2VyQ3VycmVu",
            "Y3kiiQEKD0FwcFVzZXJXaXRoZHJhdxIKCgJpZBgBIAEoCRIMCgRhZGRyGAIg",
            "ASgJEhMKC2N1cnJlbmN5X2lkGAMgASgJEg4KBmFtb3VudBgEIAEoCRINCgV0",
            "eF9pZBgFIAEoCRITCgthcHBfdXNlcl9pZBgGIAEoCRITCgtjcnlwdG9fdHlw",
            "ZRgHIAEoCSJgCgtVc2VyQWRkcmVzcxIKCgJpZBgBIAEoCRIPCgdhZGRyZXNz",
            "GAIgASgJEg0KBW93bmVyGAMgASgJEhAKCG1haW5fbmV0GAQgASgJEhMKC2Ny",
            "eXB0b190eXBlGAUgASgJMv0CCg5BcHBVc2VyU2VydmljZRI3Cg1zaWduSW5B",
            "cHBVc2VyEhEuYXBwLnVzZXIuQXBwVXNlchoRLmFwcC51c2VyLkFwcFVzZXIi",
            "ABI2CghjcmVhdGVUeBITLmFwcC51c2VyLkFwcFVzZXJUeBoTLmFwcC51c2Vy",
            "LkFwcFVzZXJUeCIAEjQKBnNlbmRUeBITLmFwcC51c2VyLkFwcFVzZXJUeBoT",
            "LmFwcC51c2VyLkFwcFVzZXJUeCIAEjsKCmdldEJhbGFuY2USES5hcHAudXNl",
            "ci5BcHBVc2VyGhguYXBwLnVzZXIuQXBwVXNlckJhbGFuY2UiABJCCgh3aXRo",
            "ZHJhdxIZLmFwcC51c2VyLkFwcFVzZXJXaXRoZHJhdxoZLmFwcC51c2VyLkFw",
            "cFVzZXJXaXRoZHJhdyIAEkMKEWNyZWF0ZVVzZXJBZGRyZXNzEhUuYXBwLnVz",
            "ZXIuVXNlckFkZHJlc3MaFS5hcHAudXNlci5Vc2VyQWRkcmVzcyIAQjQKHmNv",
            "bS5ha2V5LmFwaS5hcHBiYW5rLmdycGMudXNlckIJVXNlclByb3RvUAGiAgRB",
            "S2V5YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::App.User.AppUser), global::App.User.AppUser.Parser, new[]{ "Id", "AppId", "SessionId", "SecretPrivateKey", "SecretPublicKey", "Nonce", "AppUserId", "CryptoType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::App.User.AppUserCurrency), global::App.User.AppUserCurrency.Parser, new[]{ "Id", "SysUserId", "BankId", "CoinType", "MainNet", "Balance", "AddressBalance", "Address", "Decimals" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::App.User.AppUserTx), global::App.User.AppUserTx.Parser, new[]{ "Id", "AppId", "FromUserId", "ToUserId", "FromUserCurrencyId", "Amount", "BankId", "Fee", "CoinType", "Address", "MainNet", "TradeAt", "SessionId", "Decimals", "TxStatus", "Code", "CryptoType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::App.User.AppUserBalance), global::App.User.AppUserBalance.Parser, new[]{ "AppUserId", "AppId", "AppUserCurrencies" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::App.User.AppUserWithdraw), global::App.User.AppUserWithdraw.Parser, new[]{ "Id", "Addr", "CurrencyId", "Amount", "TxId", "AppUserId", "CryptoType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::App.User.UserAddress), global::App.User.UserAddress.Parser, new[]{ "Id", "Address", "Owner", "MainNet", "CryptoType" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AppUser : pb::IMessage<AppUser> {
    private static readonly pb::MessageParser<AppUser> _parser = new pb::MessageParser<AppUser>(() => new AppUser());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AppUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::App.User.UserReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppUser(AppUser other) : this() {
      id_ = other.id_;
      appId_ = other.appId_;
      sessionId_ = other.sessionId_;
      secretPrivateKey_ = other.secretPrivateKey_;
      secretPublicKey_ = other.secretPublicKey_;
      nonce_ = other.nonce_;
      appUserId_ = other.appUserId_;
      cryptoType_ = other.cryptoType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppUser Clone() {
      return new AppUser(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "app_id" field.</summary>
    public const int AppIdFieldNumber = 2;
    private string appId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppId {
      get { return appId_; }
      set {
        appId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "session_id" field.</summary>
    public const int SessionIdFieldNumber = 3;
    private string sessionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "secret_private_key" field.</summary>
    public const int SecretPrivateKeyFieldNumber = 4;
    private string secretPrivateKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SecretPrivateKey {
      get { return secretPrivateKey_; }
      set {
        secretPrivateKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "secret_public_key" field.</summary>
    public const int SecretPublicKeyFieldNumber = 5;
    private string secretPublicKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SecretPublicKey {
      get { return secretPublicKey_; }
      set {
        secretPublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nonce" field.</summary>
    public const int NonceFieldNumber = 6;
    private string nonce_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nonce {
      get { return nonce_; }
      set {
        nonce_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "app_user_id" field.</summary>
    public const int AppUserIdFieldNumber = 7;
    private string appUserId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppUserId {
      get { return appUserId_; }
      set {
        appUserId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "crypto_type" field.</summary>
    public const int CryptoTypeFieldNumber = 8;
    private string cryptoType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CryptoType {
      get { return cryptoType_; }
      set {
        cryptoType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AppUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AppUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (AppId != other.AppId) return false;
      if (SessionId != other.SessionId) return false;
      if (SecretPrivateKey != other.SecretPrivateKey) return false;
      if (SecretPublicKey != other.SecretPublicKey) return false;
      if (Nonce != other.Nonce) return false;
      if (AppUserId != other.AppUserId) return false;
      if (CryptoType != other.CryptoType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (AppId.Length != 0) hash ^= AppId.GetHashCode();
      if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
      if (SecretPrivateKey.Length != 0) hash ^= SecretPrivateKey.GetHashCode();
      if (SecretPublicKey.Length != 0) hash ^= SecretPublicKey.GetHashCode();
      if (Nonce.Length != 0) hash ^= Nonce.GetHashCode();
      if (AppUserId.Length != 0) hash ^= AppUserId.GetHashCode();
      if (CryptoType.Length != 0) hash ^= CryptoType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (AppId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AppId);
      }
      if (SessionId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SessionId);
      }
      if (SecretPrivateKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SecretPrivateKey);
      }
      if (SecretPublicKey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SecretPublicKey);
      }
      if (Nonce.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Nonce);
      }
      if (AppUserId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AppUserId);
      }
      if (CryptoType.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CryptoType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (AppId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppId);
      }
      if (SessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
      }
      if (SecretPrivateKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SecretPrivateKey);
      }
      if (SecretPublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SecretPublicKey);
      }
      if (Nonce.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nonce);
      }
      if (AppUserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppUserId);
      }
      if (CryptoType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CryptoType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AppUser other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.AppId.Length != 0) {
        AppId = other.AppId;
      }
      if (other.SessionId.Length != 0) {
        SessionId = other.SessionId;
      }
      if (other.SecretPrivateKey.Length != 0) {
        SecretPrivateKey = other.SecretPrivateKey;
      }
      if (other.SecretPublicKey.Length != 0) {
        SecretPublicKey = other.SecretPublicKey;
      }
      if (other.Nonce.Length != 0) {
        Nonce = other.Nonce;
      }
      if (other.AppUserId.Length != 0) {
        AppUserId = other.AppUserId;
      }
      if (other.CryptoType.Length != 0) {
        CryptoType = other.CryptoType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            AppId = input.ReadString();
            break;
          }
          case 26: {
            SessionId = input.ReadString();
            break;
          }
          case 34: {
            SecretPrivateKey = input.ReadString();
            break;
          }
          case 42: {
            SecretPublicKey = input.ReadString();
            break;
          }
          case 50: {
            Nonce = input.ReadString();
            break;
          }
          case 58: {
            AppUserId = input.ReadString();
            break;
          }
          case 66: {
            CryptoType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AppUserCurrency : pb::IMessage<AppUserCurrency> {
    private static readonly pb::MessageParser<AppUserCurrency> _parser = new pb::MessageParser<AppUserCurrency>(() => new AppUserCurrency());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AppUserCurrency> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::App.User.UserReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppUserCurrency() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppUserCurrency(AppUserCurrency other) : this() {
      id_ = other.id_;
      sysUserId_ = other.sysUserId_;
      bankId_ = other.bankId_;
      coinType_ = other.coinType_;
      mainNet_ = other.mainNet_;
      balance_ = other.balance_;
      addressBalance_ = other.addressBalance_;
      address_ = other.address_;
      decimals_ = other.decimals_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppUserCurrency Clone() {
      return new AppUserCurrency(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sys_user_id" field.</summary>
    public const int SysUserIdFieldNumber = 2;
    private string sysUserId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SysUserId {
      get { return sysUserId_; }
      set {
        sysUserId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bank_id" field.</summary>
    public const int BankIdFieldNumber = 3;
    private string bankId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BankId {
      get { return bankId_; }
      set {
        bankId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "coin_type" field.</summary>
    public const int CoinTypeFieldNumber = 4;
    private string coinType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CoinType {
      get { return coinType_; }
      set {
        coinType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "main_net" field.</summary>
    public const int MainNetFieldNumber = 5;
    private string mainNet_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MainNet {
      get { return mainNet_; }
      set {
        mainNet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "balance" field.</summary>
    public const int BalanceFieldNumber = 6;
    private string balance_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Balance {
      get { return balance_; }
      set {
        balance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address_balance" field.</summary>
    public const int AddressBalanceFieldNumber = 7;
    private string addressBalance_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AddressBalance {
      get { return addressBalance_; }
      set {
        addressBalance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 8;
    private string address_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "decimals" field.</summary>
    public const int DecimalsFieldNumber = 9;
    private uint decimals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Decimals {
      get { return decimals_; }
      set {
        decimals_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AppUserCurrency);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AppUserCurrency other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (SysUserId != other.SysUserId) return false;
      if (BankId != other.BankId) return false;
      if (CoinType != other.CoinType) return false;
      if (MainNet != other.MainNet) return false;
      if (Balance != other.Balance) return false;
      if (AddressBalance != other.AddressBalance) return false;
      if (Address != other.Address) return false;
      if (Decimals != other.Decimals) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (SysUserId.Length != 0) hash ^= SysUserId.GetHashCode();
      if (BankId.Length != 0) hash ^= BankId.GetHashCode();
      if (CoinType.Length != 0) hash ^= CoinType.GetHashCode();
      if (MainNet.Length != 0) hash ^= MainNet.GetHashCode();
      if (Balance.Length != 0) hash ^= Balance.GetHashCode();
      if (AddressBalance.Length != 0) hash ^= AddressBalance.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (Decimals != 0) hash ^= Decimals.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (SysUserId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SysUserId);
      }
      if (BankId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BankId);
      }
      if (CoinType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CoinType);
      }
      if (MainNet.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(MainNet);
      }
      if (Balance.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Balance);
      }
      if (AddressBalance.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AddressBalance);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Address);
      }
      if (Decimals != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Decimals);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (SysUserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SysUserId);
      }
      if (BankId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BankId);
      }
      if (CoinType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CoinType);
      }
      if (MainNet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MainNet);
      }
      if (Balance.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Balance);
      }
      if (AddressBalance.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AddressBalance);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Decimals != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Decimals);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AppUserCurrency other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.SysUserId.Length != 0) {
        SysUserId = other.SysUserId;
      }
      if (other.BankId.Length != 0) {
        BankId = other.BankId;
      }
      if (other.CoinType.Length != 0) {
        CoinType = other.CoinType;
      }
      if (other.MainNet.Length != 0) {
        MainNet = other.MainNet;
      }
      if (other.Balance.Length != 0) {
        Balance = other.Balance;
      }
      if (other.AddressBalance.Length != 0) {
        AddressBalance = other.AddressBalance;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.Decimals != 0) {
        Decimals = other.Decimals;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            SysUserId = input.ReadString();
            break;
          }
          case 26: {
            BankId = input.ReadString();
            break;
          }
          case 34: {
            CoinType = input.ReadString();
            break;
          }
          case 42: {
            MainNet = input.ReadString();
            break;
          }
          case 50: {
            Balance = input.ReadString();
            break;
          }
          case 58: {
            AddressBalance = input.ReadString();
            break;
          }
          case 66: {
            Address = input.ReadString();
            break;
          }
          case 72: {
            Decimals = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AppUserTx : pb::IMessage<AppUserTx> {
    private static readonly pb::MessageParser<AppUserTx> _parser = new pb::MessageParser<AppUserTx>(() => new AppUserTx());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AppUserTx> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::App.User.UserReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppUserTx() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppUserTx(AppUserTx other) : this() {
      id_ = other.id_;
      appId_ = other.appId_;
      fromUserId_ = other.fromUserId_;
      toUserId_ = other.toUserId_;
      fromUserCurrencyId_ = other.fromUserCurrencyId_;
      amount_ = other.amount_;
      bankId_ = other.bankId_;
      fee_ = other.fee_;
      coinType_ = other.coinType_;
      address_ = other.address_;
      mainNet_ = other.mainNet_;
      tradeAt_ = other.tradeAt_;
      sessionId_ = other.sessionId_;
      decimals_ = other.decimals_;
      txStatus_ = other.txStatus_;
      code_ = other.code_;
      cryptoType_ = other.cryptoType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppUserTx Clone() {
      return new AppUserTx(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "app_id" field.</summary>
    public const int AppIdFieldNumber = 2;
    private string appId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppId {
      get { return appId_; }
      set {
        appId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "from_user_id" field.</summary>
    public const int FromUserIdFieldNumber = 3;
    private string fromUserId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FromUserId {
      get { return fromUserId_; }
      set {
        fromUserId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "to_user_id" field.</summary>
    public const int ToUserIdFieldNumber = 4;
    private string toUserId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ToUserId {
      get { return toUserId_; }
      set {
        toUserId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "from_user_currency_id" field.</summary>
    public const int FromUserCurrencyIdFieldNumber = 5;
    private string fromUserCurrencyId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FromUserCurrencyId {
      get { return fromUserCurrencyId_; }
      set {
        fromUserCurrencyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 6;
    private string amount_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Amount {
      get { return amount_; }
      set {
        amount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bank_id" field.</summary>
    public const int BankIdFieldNumber = 7;
    private string bankId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BankId {
      get { return bankId_; }
      set {
        bankId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fee" field.</summary>
    public const int FeeFieldNumber = 8;
    private ulong fee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Fee {
      get { return fee_; }
      set {
        fee_ = value;
      }
    }

    /// <summary>Field number for the "coin_type" field.</summary>
    public const int CoinTypeFieldNumber = 9;
    private string coinType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CoinType {
      get { return coinType_; }
      set {
        coinType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 10;
    private string address_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "main_net" field.</summary>
    public const int MainNetFieldNumber = 11;
    private string mainNet_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MainNet {
      get { return mainNet_; }
      set {
        mainNet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "trade_at" field.</summary>
    public const int TradeAtFieldNumber = 12;
    private ulong tradeAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TradeAt {
      get { return tradeAt_; }
      set {
        tradeAt_ = value;
      }
    }

    /// <summary>Field number for the "session_id" field.</summary>
    public const int SessionIdFieldNumber = 13;
    private string sessionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "decimals" field.</summary>
    public const int DecimalsFieldNumber = 14;
    private uint decimals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Decimals {
      get { return decimals_; }
      set {
        decimals_ = value;
      }
    }

    /// <summary>Field number for the "tx_status" field.</summary>
    public const int TxStatusFieldNumber = 15;
    private uint txStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TxStatus {
      get { return txStatus_; }
      set {
        txStatus_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 16;
    private string code_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "crypto_type" field.</summary>
    public const int CryptoTypeFieldNumber = 17;
    private string cryptoType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CryptoType {
      get { return cryptoType_; }
      set {
        cryptoType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AppUserTx);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AppUserTx other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (AppId != other.AppId) return false;
      if (FromUserId != other.FromUserId) return false;
      if (ToUserId != other.ToUserId) return false;
      if (FromUserCurrencyId != other.FromUserCurrencyId) return false;
      if (Amount != other.Amount) return false;
      if (BankId != other.BankId) return false;
      if (Fee != other.Fee) return false;
      if (CoinType != other.CoinType) return false;
      if (Address != other.Address) return false;
      if (MainNet != other.MainNet) return false;
      if (TradeAt != other.TradeAt) return false;
      if (SessionId != other.SessionId) return false;
      if (Decimals != other.Decimals) return false;
      if (TxStatus != other.TxStatus) return false;
      if (Code != other.Code) return false;
      if (CryptoType != other.CryptoType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (AppId.Length != 0) hash ^= AppId.GetHashCode();
      if (FromUserId.Length != 0) hash ^= FromUserId.GetHashCode();
      if (ToUserId.Length != 0) hash ^= ToUserId.GetHashCode();
      if (FromUserCurrencyId.Length != 0) hash ^= FromUserCurrencyId.GetHashCode();
      if (Amount.Length != 0) hash ^= Amount.GetHashCode();
      if (BankId.Length != 0) hash ^= BankId.GetHashCode();
      if (Fee != 0UL) hash ^= Fee.GetHashCode();
      if (CoinType.Length != 0) hash ^= CoinType.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (MainNet.Length != 0) hash ^= MainNet.GetHashCode();
      if (TradeAt != 0UL) hash ^= TradeAt.GetHashCode();
      if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
      if (Decimals != 0) hash ^= Decimals.GetHashCode();
      if (TxStatus != 0) hash ^= TxStatus.GetHashCode();
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (CryptoType.Length != 0) hash ^= CryptoType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (AppId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AppId);
      }
      if (FromUserId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FromUserId);
      }
      if (ToUserId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ToUserId);
      }
      if (FromUserCurrencyId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(FromUserCurrencyId);
      }
      if (Amount.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Amount);
      }
      if (BankId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(BankId);
      }
      if (Fee != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(Fee);
      }
      if (CoinType.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(CoinType);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Address);
      }
      if (MainNet.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(MainNet);
      }
      if (TradeAt != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(TradeAt);
      }
      if (SessionId.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(SessionId);
      }
      if (Decimals != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(Decimals);
      }
      if (TxStatus != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(TxStatus);
      }
      if (Code.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Code);
      }
      if (CryptoType.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(CryptoType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (AppId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppId);
      }
      if (FromUserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FromUserId);
      }
      if (ToUserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ToUserId);
      }
      if (FromUserCurrencyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FromUserCurrencyId);
      }
      if (Amount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Amount);
      }
      if (BankId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BankId);
      }
      if (Fee != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Fee);
      }
      if (CoinType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CoinType);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (MainNet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MainNet);
      }
      if (TradeAt != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TradeAt);
      }
      if (SessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
      }
      if (Decimals != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Decimals);
      }
      if (TxStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TxStatus);
      }
      if (Code.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (CryptoType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CryptoType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AppUserTx other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.AppId.Length != 0) {
        AppId = other.AppId;
      }
      if (other.FromUserId.Length != 0) {
        FromUserId = other.FromUserId;
      }
      if (other.ToUserId.Length != 0) {
        ToUserId = other.ToUserId;
      }
      if (other.FromUserCurrencyId.Length != 0) {
        FromUserCurrencyId = other.FromUserCurrencyId;
      }
      if (other.Amount.Length != 0) {
        Amount = other.Amount;
      }
      if (other.BankId.Length != 0) {
        BankId = other.BankId;
      }
      if (other.Fee != 0UL) {
        Fee = other.Fee;
      }
      if (other.CoinType.Length != 0) {
        CoinType = other.CoinType;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.MainNet.Length != 0) {
        MainNet = other.MainNet;
      }
      if (other.TradeAt != 0UL) {
        TradeAt = other.TradeAt;
      }
      if (other.SessionId.Length != 0) {
        SessionId = other.SessionId;
      }
      if (other.Decimals != 0) {
        Decimals = other.Decimals;
      }
      if (other.TxStatus != 0) {
        TxStatus = other.TxStatus;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      if (other.CryptoType.Length != 0) {
        CryptoType = other.CryptoType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            AppId = input.ReadString();
            break;
          }
          case 26: {
            FromUserId = input.ReadString();
            break;
          }
          case 34: {
            ToUserId = input.ReadString();
            break;
          }
          case 42: {
            FromUserCurrencyId = input.ReadString();
            break;
          }
          case 50: {
            Amount = input.ReadString();
            break;
          }
          case 58: {
            BankId = input.ReadString();
            break;
          }
          case 64: {
            Fee = input.ReadUInt64();
            break;
          }
          case 74: {
            CoinType = input.ReadString();
            break;
          }
          case 82: {
            Address = input.ReadString();
            break;
          }
          case 90: {
            MainNet = input.ReadString();
            break;
          }
          case 96: {
            TradeAt = input.ReadUInt64();
            break;
          }
          case 106: {
            SessionId = input.ReadString();
            break;
          }
          case 112: {
            Decimals = input.ReadUInt32();
            break;
          }
          case 120: {
            TxStatus = input.ReadUInt32();
            break;
          }
          case 130: {
            Code = input.ReadString();
            break;
          }
          case 138: {
            CryptoType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AppUserBalance : pb::IMessage<AppUserBalance> {
    private static readonly pb::MessageParser<AppUserBalance> _parser = new pb::MessageParser<AppUserBalance>(() => new AppUserBalance());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AppUserBalance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::App.User.UserReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppUserBalance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppUserBalance(AppUserBalance other) : this() {
      appUserId_ = other.appUserId_;
      appId_ = other.appId_;
      appUserCurrencies_ = other.appUserCurrencies_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppUserBalance Clone() {
      return new AppUserBalance(this);
    }

    /// <summary>Field number for the "app_user_id" field.</summary>
    public const int AppUserIdFieldNumber = 1;
    private string appUserId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppUserId {
      get { return appUserId_; }
      set {
        appUserId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "app_id" field.</summary>
    public const int AppIdFieldNumber = 2;
    private string appId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppId {
      get { return appId_; }
      set {
        appId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "appUserCurrencies" field.</summary>
    public const int AppUserCurrenciesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::App.User.AppUserCurrency> _repeated_appUserCurrencies_codec
        = pb::FieldCodec.ForMessage(26, global::App.User.AppUserCurrency.Parser);
    private readonly pbc::RepeatedField<global::App.User.AppUserCurrency> appUserCurrencies_ = new pbc::RepeatedField<global::App.User.AppUserCurrency>();
    /// <summary>
    ///repeated LockCoin locks = 4;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::App.User.AppUserCurrency> AppUserCurrencies {
      get { return appUserCurrencies_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AppUserBalance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AppUserBalance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AppUserId != other.AppUserId) return false;
      if (AppId != other.AppId) return false;
      if(!appUserCurrencies_.Equals(other.appUserCurrencies_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AppUserId.Length != 0) hash ^= AppUserId.GetHashCode();
      if (AppId.Length != 0) hash ^= AppId.GetHashCode();
      hash ^= appUserCurrencies_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AppUserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AppUserId);
      }
      if (AppId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AppId);
      }
      appUserCurrencies_.WriteTo(output, _repeated_appUserCurrencies_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AppUserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppUserId);
      }
      if (AppId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppId);
      }
      size += appUserCurrencies_.CalculateSize(_repeated_appUserCurrencies_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AppUserBalance other) {
      if (other == null) {
        return;
      }
      if (other.AppUserId.Length != 0) {
        AppUserId = other.AppUserId;
      }
      if (other.AppId.Length != 0) {
        AppId = other.AppId;
      }
      appUserCurrencies_.Add(other.appUserCurrencies_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AppUserId = input.ReadString();
            break;
          }
          case 18: {
            AppId = input.ReadString();
            break;
          }
          case 26: {
            appUserCurrencies_.AddEntriesFrom(input, _repeated_appUserCurrencies_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AppUserWithdraw : pb::IMessage<AppUserWithdraw> {
    private static readonly pb::MessageParser<AppUserWithdraw> _parser = new pb::MessageParser<AppUserWithdraw>(() => new AppUserWithdraw());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AppUserWithdraw> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::App.User.UserReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppUserWithdraw() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppUserWithdraw(AppUserWithdraw other) : this() {
      id_ = other.id_;
      addr_ = other.addr_;
      currencyId_ = other.currencyId_;
      amount_ = other.amount_;
      txId_ = other.txId_;
      appUserId_ = other.appUserId_;
      cryptoType_ = other.cryptoType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppUserWithdraw Clone() {
      return new AppUserWithdraw(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "addr" field.</summary>
    public const int AddrFieldNumber = 2;
    private string addr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Addr {
      get { return addr_; }
      set {
        addr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currency_id" field.</summary>
    public const int CurrencyIdFieldNumber = 3;
    private string currencyId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrencyId {
      get { return currencyId_; }
      set {
        currencyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 4;
    private string amount_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Amount {
      get { return amount_; }
      set {
        amount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tx_id" field.</summary>
    public const int TxIdFieldNumber = 5;
    private string txId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TxId {
      get { return txId_; }
      set {
        txId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "app_user_id" field.</summary>
    public const int AppUserIdFieldNumber = 6;
    private string appUserId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppUserId {
      get { return appUserId_; }
      set {
        appUserId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "crypto_type" field.</summary>
    public const int CryptoTypeFieldNumber = 7;
    private string cryptoType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CryptoType {
      get { return cryptoType_; }
      set {
        cryptoType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AppUserWithdraw);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AppUserWithdraw other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Addr != other.Addr) return false;
      if (CurrencyId != other.CurrencyId) return false;
      if (Amount != other.Amount) return false;
      if (TxId != other.TxId) return false;
      if (AppUserId != other.AppUserId) return false;
      if (CryptoType != other.CryptoType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Addr.Length != 0) hash ^= Addr.GetHashCode();
      if (CurrencyId.Length != 0) hash ^= CurrencyId.GetHashCode();
      if (Amount.Length != 0) hash ^= Amount.GetHashCode();
      if (TxId.Length != 0) hash ^= TxId.GetHashCode();
      if (AppUserId.Length != 0) hash ^= AppUserId.GetHashCode();
      if (CryptoType.Length != 0) hash ^= CryptoType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Addr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Addr);
      }
      if (CurrencyId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CurrencyId);
      }
      if (Amount.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Amount);
      }
      if (TxId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TxId);
      }
      if (AppUserId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(AppUserId);
      }
      if (CryptoType.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(CryptoType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Addr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Addr);
      }
      if (CurrencyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrencyId);
      }
      if (Amount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Amount);
      }
      if (TxId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TxId);
      }
      if (AppUserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppUserId);
      }
      if (CryptoType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CryptoType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AppUserWithdraw other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Addr.Length != 0) {
        Addr = other.Addr;
      }
      if (other.CurrencyId.Length != 0) {
        CurrencyId = other.CurrencyId;
      }
      if (other.Amount.Length != 0) {
        Amount = other.Amount;
      }
      if (other.TxId.Length != 0) {
        TxId = other.TxId;
      }
      if (other.AppUserId.Length != 0) {
        AppUserId = other.AppUserId;
      }
      if (other.CryptoType.Length != 0) {
        CryptoType = other.CryptoType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Addr = input.ReadString();
            break;
          }
          case 26: {
            CurrencyId = input.ReadString();
            break;
          }
          case 34: {
            Amount = input.ReadString();
            break;
          }
          case 42: {
            TxId = input.ReadString();
            break;
          }
          case 50: {
            AppUserId = input.ReadString();
            break;
          }
          case 58: {
            CryptoType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserAddress : pb::IMessage<UserAddress> {
    private static readonly pb::MessageParser<UserAddress> _parser = new pb::MessageParser<UserAddress>(() => new UserAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::App.User.UserReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAddress(UserAddress other) : this() {
      id_ = other.id_;
      address_ = other.address_;
      owner_ = other.owner_;
      mainNet_ = other.mainNet_;
      cryptoType_ = other.cryptoType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserAddress Clone() {
      return new UserAddress(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 2;
    private string address_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 3;
    private string owner_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Owner {
      get { return owner_; }
      set {
        owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "main_net" field.</summary>
    public const int MainNetFieldNumber = 4;
    private string mainNet_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MainNet {
      get { return mainNet_; }
      set {
        mainNet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "crypto_type" field.</summary>
    public const int CryptoTypeFieldNumber = 5;
    private string cryptoType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CryptoType {
      get { return cryptoType_; }
      set {
        cryptoType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Address != other.Address) return false;
      if (Owner != other.Owner) return false;
      if (MainNet != other.MainNet) return false;
      if (CryptoType != other.CryptoType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (Owner.Length != 0) hash ^= Owner.GetHashCode();
      if (MainNet.Length != 0) hash ^= MainNet.GetHashCode();
      if (CryptoType.Length != 0) hash ^= CryptoType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Address);
      }
      if (Owner.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Owner);
      }
      if (MainNet.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MainNet);
      }
      if (CryptoType.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CryptoType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Owner.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
      }
      if (MainNet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MainNet);
      }
      if (CryptoType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CryptoType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserAddress other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.Owner.Length != 0) {
        Owner = other.Owner;
      }
      if (other.MainNet.Length != 0) {
        MainNet = other.MainNet;
      }
      if (other.CryptoType.Length != 0) {
        CryptoType = other.CryptoType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Address = input.ReadString();
            break;
          }
          case 26: {
            Owner = input.ReadString();
            break;
          }
          case 34: {
            MainNet = input.ReadString();
            break;
          }
          case 42: {
            CryptoType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
